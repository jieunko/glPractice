#include "cubemap_prefilter.h"
#include <macros.h>
#include <vk_mem_alloc.h>
#include <profiler.h>
#include <glm.hpp>
#define _USE_MATH_DEFINES
#include <math.h>
#include <logger.h>

#define PREFILTER_MAP_SIZE 256
#define PREFILTER_MIP_LEVELS 5
#define PREFILTER_WORK_GROUP_SIZE 8
#define MAX_PREFILTER_SAMPLES 64

namespace dw
{
// -----------------------------------------------------------------------------------------------------------------------------------

#if defined(DWSF_VULKAN)
static const unsigned int kPREFILTER_SPIRV_size           = 9304;
static const unsigned int kPREFILTER_SPIRV_data[9304 / 4] = {
    0x07230203,
    0x00010500,
    0x0008000a,
    0x00000187,
    0x00000000,
    0x00020011,
    0x00000001,
    0x00020011,
    0x00000032,
    0x0006000b,
    0x00000001,
    0x4c534c47,
    0x6474732e,
    0x3035342e,
    0x00000000,
    0x0003000e,
    0x00000000,
    0x00000001,
    0x000a000f,
    0x00000005,
    0x00000004,
    0x6e69616d,
    0x00000000,
    0x0000002a,
    0x000000ae,
    0x000000c4,
    0x0000010d,
    0x0000017b,
    0x00060010,
    0x00000004,
    0x00000011,
    0x00000008,
    0x00000008,
    0x00000001,
    0x00030003,
    0x00000002,
    0x000001c2,
    0x00040005,
    0x00000004,
    0x6e69616d,
    0x00000000,
    0x00060005,
    0x0000000b,
    0x656c6e75,
    0x66287072,
    0x31663b31,
    0x0000003b,
    0x00030005,
    0x00000009,
    0x006c6176,
    0x00040005,
    0x0000000a,
    0x5f78616d,
    0x006c6176,
    0x000a0005,
    0x00000014,
    0x636c6163,
    0x74616c75,
    0x69645f65,
    0x74636572,
    0x286e6f69,
    0x753b3175,
    0x31753b31,
    0x0000003b,
    0x00040005,
    0x00000011,
    0x65636166,
    0x00000000,
    0x00040005,
    0x00000012,
    0x65636166,
    0x0000785f,
    0x00040005,
    0x00000013,
    0x65636166,
    0x0000795f,
    0x000a0005,
    0x0000001b,
    0x74736964,
    0x75626972,
    0x6e6f6974,
    0x7867675f,
    0x33667628,
    0x3366763b,
    0x3b31663b,
    0x00000000,
    0x00030005,
    0x00000018,
    0x0000004e,
    0x00030005,
    0x00000019,
    0x00000048,
    0x00050005,
    0x0000001a,
    0x67756f72,
    0x73656e68,
    0x00000073,
    0x00030005,
    0x00000024,
    0x00000073,
    0x00060005,
    0x00000028,
    0x68737550,
    0x736e6f43,
    0x746e6174,
    0x00000073,
    0x00060006,
    0x00000028,
    0x00000000,
    0x67756f72,
    0x73656e68,
    0x00000073,
    0x00050006,
    0x00000028,
    0x00000001,
    0x657a6973,
    0x00000000,
    0x00070006,
    0x00000028,
    0x00000002,
    0x72617473,
    0x696d5f74,
    0x656c5f70,
    0x006c6576,
    0x00070006,
    0x00000028,
    0x00000003,
    0x706d6173,
    0x635f656c,
    0x746e756f,
    0x00000000,
    0x00060005,
    0x0000002a,
    0x68737570,
    0x6e6f635f,
    0x6e617473,
    0x00007374,
    0x00040005,
    0x0000002c,
    0x61726170,
    0x0000006d,
    0x00040005,
    0x0000002d,
    0x61726170,
    0x0000006d,
    0x00030005,
    0x00000036,
    0x00000074,
    0x00040005,
    0x00000039,
    0x61726170,
    0x0000006d,
    0x00040005,
    0x0000003a,
    0x61726170,
    0x0000006d,
    0x00030005,
    0x00000048,
    0x00000078,
    0x00030005,
    0x0000004a,
    0x00000079,
    0x00030005,
    0x0000004d,
    0x0000007a,
    0x00040005,
    0x00000066,
    0x5f766e69,
    0x006e656c,
    0x00030005,
    0x00000074,
    0x00000064,
    0x00030005,
    0x00000087,
    0x00000061,
    0x00030005,
    0x0000008b,
    0x00003261,
    0x00040005,
    0x0000008f,
    0x746f644e,
    0x00000048,
    0x00040005,
    0x00000095,
    0x746f644e,
    0x00003248,
    0x00030005,
    0x00000099,
    0x006d6f6e,
    0x00040005,
    0x0000009b,
    0x6f6e6564,
    0x0000006d,
    0x00030005,
    0x000000ab,
    0x0000004e,
    0x00080005,
    0x000000ae,
    0x475f6c67,
    0x61626f6c,
    0x766e496c,
    0x7461636f,
    0x496e6f69,
    0x00000044,
    0x00040005,
    0x000000af,
    0x61726170,
    0x0000006d,
    0x00040005,
    0x000000b3,
    0x61726170,
    0x0000006d,
    0x00040005,
    0x000000b6,
    0x61726170,
    0x0000006d,
    0x00030005,
    0x000000ba,
    0x00000052,
    0x00030005,
    0x000000bc,
    0x00000056,
    0x00040005,
    0x000000c0,
    0x657a6973,
    0x00000000,
    0x00050005,
    0x000000c4,
    0x6e455f73,
    0x70614d76,
    0x00000000,
    0x00050005,
    0x000000cc,
    0x6f736572,
    0x6974756c,
    0x00006e6f,
    0x00070005,
    0x000000d1,
    0x66657270,
    0x65746c69,
    0x5f646572,
    0x6f6c6f63,
    0x00000072,
    0x00060005,
    0x000000d3,
    0x61746f74,
    0x65775f6c,
    0x74686769,
    0x00000000,
    0x00030005,
    0x000000d4,
    0x00007075,
    0x00040005,
    0x000000de,
    0x676e6174,
    0x00746e65,
    0x00050005,
    0x000000e3,
    0x61746962,
    0x6e65676e,
    0x00000074,
    0x00070005,
    0x000000e9,
    0x676e6174,
    0x5f746e65,
    0x775f6f74,
    0x646c726f,
    0x00000000,
    0x00030005,
    0x000000fa,
    0x00000069,
    0x00030005,
    0x00000106,
    0x00000048,
    0x00070005,
    0x0000010b,
    0x61535f75,
    0x656c706d,
    0x65726944,
    0x6f697463,
    0x0000736e,
    0x00080006,
    0x0000010b,
    0x00000000,
    0x706d6173,
    0x645f656c,
    0x63657269,
    0x6e6f6974,
    0x00000073,
    0x00030005,
    0x0000010d,
    0x00000000,
    0x00030005,
    0x00000115,
    0x0000004c,
    0x00040005,
    0x0000011f,
    0x746f644e,
    0x0000004c,
    0x00030005,
    0x00000128,
    0x00000044,
    0x00040005,
    0x00000129,
    0x61726170,
    0x0000006d,
    0x00040005,
    0x0000012b,
    0x61726170,
    0x0000006d,
    0x00040005,
    0x0000012d,
    0x61726170,
    0x0000006d,
    0x00040005,
    0x00000131,
    0x746f644e,
    0x00000048,
    0x00040005,
    0x00000136,
    0x746f6448,
    0x00000056,
    0x00030005,
    0x0000013b,
    0x00666470,
    0x00050005,
    0x00000145,
    0x745f6173,
    0x6c657865,
    0x00000000,
    0x00050005,
    0x0000014d,
    0x735f6173,
    0x6c706d61,
    0x00000065,
    0x00050005,
    0x00000155,
    0x5f70696d,
    0x6576656c,
    0x0000006c,
    0x00060005,
    0x0000017b,
    0x72505f69,
    0x6c696665,
    0x65726574,
    0x00000064,
    0x00050048,
    0x00000028,
    0x00000000,
    0x00000023,
    0x00000000,
    0x00050048,
    0x00000028,
    0x00000001,
    0x00000023,
    0x00000004,
    0x00050048,
    0x00000028,
    0x00000002,
    0x00000023,
    0x00000008,
    0x00050048,
    0x00000028,
    0x00000003,
    0x00000023,
    0x0000000c,
    0x00030047,
    0x00000028,
    0x00000002,
    0x00040047,
    0x000000ae,
    0x0000000b,
    0x0000001c,
    0x00040047,
    0x000000c4,
    0x00000022,
    0x00000000,
    0x00040047,
    0x000000c4,
    0x00000021,
    0x00000001,
    0x00040047,
    0x0000010a,
    0x00000006,
    0x00000010,
    0x00050048,
    0x0000010b,
    0x00000000,
    0x00000023,
    0x00000000,
    0x00030047,
    0x0000010b,
    0x00000002,
    0x00040047,
    0x0000010d,
    0x00000022,
    0x00000000,
    0x00040047,
    0x0000010d,
    0x00000021,
    0x00000002,
    0x00040047,
    0x0000017b,
    0x00000022,
    0x00000000,
    0x00040047,
    0x0000017b,
    0x00000021,
    0x00000000,
    0x00040047,
    0x00000186,
    0x0000000b,
    0x00000019,
    0x00020013,
    0x00000002,
    0x00030021,
    0x00000003,
    0x00000002,
    0x00030016,
    0x00000006,
    0x00000020,
    0x00040020,
    0x00000007,
    0x00000007,
    0x00000006,
    0x00050021,
    0x00000008,
    0x00000006,
    0x00000007,
    0x00000007,
    0x00040015,
    0x0000000d,
    0x00000020,
    0x00000000,
    0x00040020,
    0x0000000e,
    0x00000007,
    0x0000000d,
    0x00040017,
    0x0000000f,
    0x00000006,
    0x00000003,
    0x00060021,
    0x00000010,
    0x0000000f,
    0x0000000e,
    0x0000000e,
    0x0000000e,
    0x00040020,
    0x00000016,
    0x00000007,
    0x0000000f,
    0x00060021,
    0x00000017,
    0x00000006,
    0x00000016,
    0x00000016,
    0x00000007,
    0x0004002b,
    0x00000006,
    0x0000001e,
    0x3f000000,
    0x00040015,
    0x00000027,
    0x00000020,
    0x00000001,
    0x0006001e,
    0x00000028,
    0x00000006,
    0x00000006,
    0x00000027,
    0x00000027,
    0x00040020,
    0x00000029,
    0x00000009,
    0x00000028,
    0x0004003b,
    0x00000029,
    0x0000002a,
    0x00000009,
    0x0004002b,
    0x00000027,
    0x0000002b,
    0x00000001,
    0x00040020,
    0x0000002e,
    0x00000009,
    0x00000006,
    0x0004002b,
    0x00000006,
    0x00000032,
    0x40000000,
    0x0004002b,
    0x00000006,
    0x00000034,
    0x3f800000,
    0x0004002b,
    0x00000006,
    0x00000053,
    0xbf800000,
    0x0004002b,
    0x0000000d,
    0x00000078,
    0x00000000,
    0x0004002b,
    0x0000000d,
    0x0000007d,
    0x00000001,
    0x0004002b,
    0x0000000d,
    0x00000082,
    0x00000002,
    0x0004002b,
    0x00000006,
    0x00000093,
    0x00000000,
    0x0004002b,
    0x00000006,
    0x000000a1,
    0x40490fdb,
    0x00040017,
    0x000000ac,
    0x0000000d,
    0x00000003,
    0x00040020,
    0x000000ad,
    0x00000001,
    0x000000ac,
    0x0004003b,
    0x000000ad,
    0x000000ae,
    0x00000001,
    0x00040020,
    0x000000b0,
    0x00000001,
    0x0000000d,
    0x00040017,
    0x000000be,
    0x00000027,
    0x00000002,
    0x00040020,
    0x000000bf,
    0x00000007,
    0x000000be,
    0x00090019,
    0x000000c1,
    0x00000006,
    0x00000003,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000001,
    0x00000000,
    0x0003001b,
    0x000000c2,
    0x000000c1,
    0x00040020,
    0x000000c3,
    0x00000000,
    0x000000c2,
    0x0004003b,
    0x000000c3,
    0x000000c4,
    0x00000000,
    0x0004002b,
    0x00000027,
    0x000000c6,
    0x00000002,
    0x00040020,
    0x000000c7,
    0x00000009,
    0x00000027,
    0x00040020,
    0x000000cd,
    0x00000007,
    0x00000027,
    0x0006002c,
    0x0000000f,
    0x000000d2,
    0x00000093,
    0x00000093,
    0x00000093,
    0x0004002b,
    0x00000006,
    0x000000d8,
    0x3f7fbe77,
    0x00020014,
    0x000000d9,
    0x0006002c,
    0x0000000f,
    0x000000db,
    0x00000093,
    0x00000093,
    0x00000034,
    0x0006002c,
    0x0000000f,
    0x000000dc,
    0x00000034,
    0x00000093,
    0x00000093,
    0x00040018,
    0x000000e7,
    0x0000000f,
    0x00000003,
    0x00040020,
    0x000000e8,
    0x00000007,
    0x000000e7,
    0x0004002b,
    0x00000027,
    0x00000101,
    0x00000003,
    0x00040017,
    0x00000108,
    0x00000006,
    0x00000004,
    0x0004002b,
    0x0000000d,
    0x00000109,
    0x00000040,
    0x0004001c,
    0x0000010a,
    0x00000108,
    0x00000109,
    0x0003001e,
    0x0000010b,
    0x0000010a,
    0x00040020,
    0x0000010c,
    0x00000002,
    0x0000010b,
    0x0004003b,
    0x0000010c,
    0x0000010d,
    0x00000002,
    0x0004002b,
    0x00000027,
    0x0000010e,
    0x00000000,
    0x00040020,
    0x00000110,
    0x00000002,
    0x00000108,
    0x0004002b,
    0x00000006,
    0x0000013f,
    0x40800000,
    0x0004002b,
    0x00000006,
    0x00000143,
    0x38d1b717,
    0x0004002b,
    0x00000006,
    0x00000146,
    0x41490fdb,
    0x0004002b,
    0x00000006,
    0x00000147,
    0x40c00000,
    0x00090019,
    0x00000179,
    0x00000006,
    0x00000003,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000002,
    0x00000002,
    0x00040020,
    0x0000017a,
    0x00000000,
    0x00000179,
    0x0004003b,
    0x0000017a,
    0x0000017b,
    0x00000000,
    0x00040017,
    0x0000017e,
    0x00000027,
    0x00000003,
    0x0004002b,
    0x0000000d,
    0x00000185,
    0x00000008,
    0x0006002c,
    0x000000ac,
    0x00000186,
    0x00000185,
    0x00000185,
    0x0000007d,
    0x00050036,
    0x00000002,
    0x00000004,
    0x00000000,
    0x00000003,
    0x000200f8,
    0x00000005,
    0x0004003b,
    0x00000016,
    0x000000ab,
    0x00000007,
    0x0004003b,
    0x0000000e,
    0x000000af,
    0x00000007,
    0x0004003b,
    0x0000000e,
    0x000000b3,
    0x00000007,
    0x0004003b,
    0x0000000e,
    0x000000b6,
    0x00000007,
    0x0004003b,
    0x00000016,
    0x000000ba,
    0x00000007,
    0x0004003b,
    0x00000016,
    0x000000bc,
    0x00000007,
    0x0004003b,
    0x000000bf,
    0x000000c0,
    0x00000007,
    0x0004003b,
    0x00000007,
    0x000000cc,
    0x00000007,
    0x0004003b,
    0x00000016,
    0x000000d1,
    0x00000007,
    0x0004003b,
    0x00000007,
    0x000000d3,
    0x00000007,
    0x0004003b,
    0x00000016,
    0x000000d4,
    0x00000007,
    0x0004003b,
    0x00000016,
    0x000000de,
    0x00000007,
    0x0004003b,
    0x00000016,
    0x000000e3,
    0x00000007,
    0x0004003b,
    0x000000e8,
    0x000000e9,
    0x00000007,
    0x0004003b,
    0x0000000e,
    0x000000fa,
    0x00000007,
    0x0004003b,
    0x00000016,
    0x00000106,
    0x00000007,
    0x0004003b,
    0x00000016,
    0x00000115,
    0x00000007,
    0x0004003b,
    0x00000007,
    0x0000011f,
    0x00000007,
    0x0004003b,
    0x00000007,
    0x00000128,
    0x00000007,
    0x0004003b,
    0x00000016,
    0x00000129,
    0x00000007,
    0x0004003b,
    0x00000016,
    0x0000012b,
    0x00000007,
    0x0004003b,
    0x00000007,
    0x0000012d,
    0x00000007,
    0x0004003b,
    0x00000007,
    0x00000131,
    0x00000007,
    0x0004003b,
    0x00000007,
    0x00000136,
    0x00000007,
    0x0004003b,
    0x00000007,
    0x0000013b,
    0x00000007,
    0x0004003b,
    0x00000007,
    0x00000145,
    0x00000007,
    0x0004003b,
    0x00000007,
    0x0000014d,
    0x00000007,
    0x0004003b,
    0x00000007,
    0x00000155,
    0x00000007,
    0x0004003b,
    0x00000007,
    0x00000159,
    0x00000007,
    0x00050041,
    0x000000b0,
    0x000000b1,
    0x000000ae,
    0x00000082,
    0x0004003d,
    0x0000000d,
    0x000000b2,
    0x000000b1,
    0x0003003e,
    0x000000af,
    0x000000b2,
    0x00050041,
    0x000000b0,
    0x000000b4,
    0x000000ae,
    0x00000078,
    0x0004003d,
    0x0000000d,
    0x000000b5,
    0x000000b4,
    0x0003003e,
    0x000000b3,
    0x000000b5,
    0x00050041,
    0x000000b0,
    0x000000b7,
    0x000000ae,
    0x0000007d,
    0x0004003d,
    0x0000000d,
    0x000000b8,
    0x000000b7,
    0x0003003e,
    0x000000b6,
    0x000000b8,
    0x00070039,
    0x0000000f,
    0x000000b9,
    0x00000014,
    0x000000af,
    0x000000b3,
    0x000000b6,
    0x0003003e,
    0x000000ab,
    0x000000b9,
    0x0004003d,
    0x0000000f,
    0x000000bb,
    0x000000ab,
    0x0003003e,
    0x000000ba,
    0x000000bb,
    0x0004003d,
    0x0000000f,
    0x000000bd,
    0x000000ba,
    0x0003003e,
    0x000000bc,
    0x000000bd,
    0x0004003d,
    0x000000c2,
    0x000000c5,
    0x000000c4,
    0x00050041,
    0x000000c7,
    0x000000c8,
    0x0000002a,
    0x000000c6,
    0x0004003d,
    0x00000027,
    0x000000c9,
    0x000000c8,
    0x00040064,
    0x000000c1,
    0x000000ca,
    0x000000c5,
    0x00050067,
    0x000000be,
    0x000000cb,
    0x000000ca,
    0x000000c9,
    0x0003003e,
    0x000000c0,
    0x000000cb,
    0x00050041,
    0x000000cd,
    0x000000ce,
    0x000000c0,
    0x00000078,
    0x0004003d,
    0x00000027,
    0x000000cf,
    0x000000ce,
    0x0004006f,
    0x00000006,
    0x000000d0,
    0x000000cf,
    0x0003003e,
    0x000000cc,
    0x000000d0,
    0x0003003e,
    0x000000d1,
    0x000000d2,
    0x0003003e,
    0x000000d3,
    0x00000093,
    0x00050041,
    0x00000007,
    0x000000d5,
    0x000000ab,
    0x00000082,
    0x0004003d,
    0x00000006,
    0x000000d6,
    0x000000d5,
    0x0006000c,
    0x00000006,
    0x000000d7,
    0x00000001,
    0x00000004,
    0x000000d6,
    0x000500b8,
    0x000000d9,
    0x000000da,
    0x000000d7,
    0x000000d8,
    0x000600a9,
    0x0000000f,
    0x000000dd,
    0x000000da,
    0x000000db,
    0x000000dc,
    0x0003003e,
    0x000000d4,
    0x000000dd,
    0x0004003d,
    0x0000000f,
    0x000000df,
    0x000000d4,
    0x0004003d,
    0x0000000f,
    0x000000e0,
    0x000000ab,
    0x0007000c,
    0x0000000f,
    0x000000e1,
    0x00000001,
    0x00000044,
    0x000000df,
    0x000000e0,
    0x0006000c,
    0x0000000f,
    0x000000e2,
    0x00000001,
    0x00000045,
    0x000000e1,
    0x0003003e,
    0x000000de,
    0x000000e2,
    0x0004003d,
    0x0000000f,
    0x000000e4,
    0x000000ab,
    0x0004003d,
    0x0000000f,
    0x000000e5,
    0x000000de,
    0x0007000c,
    0x0000000f,
    0x000000e6,
    0x00000001,
    0x00000044,
    0x000000e4,
    0x000000e5,
    0x0003003e,
    0x000000e3,
    0x000000e6,
    0x0004003d,
    0x0000000f,
    0x000000ea,
    0x000000de,
    0x0004003d,
    0x0000000f,
    0x000000eb,
    0x000000e3,
    0x0004003d,
    0x0000000f,
    0x000000ec,
    0x000000ab,
    0x00050051,
    0x00000006,
    0x000000ed,
    0x000000ea,
    0x00000000,
    0x00050051,
    0x00000006,
    0x000000ee,
    0x000000ea,
    0x00000001,
    0x00050051,
    0x00000006,
    0x000000ef,
    0x000000ea,
    0x00000002,
    0x00050051,
    0x00000006,
    0x000000f0,
    0x000000eb,
    0x00000000,
    0x00050051,
    0x00000006,
    0x000000f1,
    0x000000eb,
    0x00000001,
    0x00050051,
    0x00000006,
    0x000000f2,
    0x000000eb,
    0x00000002,
    0x00050051,
    0x00000006,
    0x000000f3,
    0x000000ec,
    0x00000000,
    0x00050051,
    0x00000006,
    0x000000f4,
    0x000000ec,
    0x00000001,
    0x00050051,
    0x00000006,
    0x000000f5,
    0x000000ec,
    0x00000002,
    0x00060050,
    0x0000000f,
    0x000000f6,
    0x000000ed,
    0x000000ee,
    0x000000ef,
    0x00060050,
    0x0000000f,
    0x000000f7,
    0x000000f0,
    0x000000f1,
    0x000000f2,
    0x00060050,
    0x0000000f,
    0x000000f8,
    0x000000f3,
    0x000000f4,
    0x000000f5,
    0x00060050,
    0x000000e7,
    0x000000f9,
    0x000000f6,
    0x000000f7,
    0x000000f8,
    0x0003003e,
    0x000000e9,
    0x000000f9,
    0x0003003e,
    0x000000fa,
    0x00000078,
    0x000200f9,
    0x000000fb,
    0x000200f8,
    0x000000fb,
    0x000400f6,
    0x000000fd,
    0x000000fe,
    0x00000000,
    0x000200f9,
    0x000000ff,
    0x000200f8,
    0x000000ff,
    0x0004003d,
    0x0000000d,
    0x00000100,
    0x000000fa,
    0x00050041,
    0x000000c7,
    0x00000102,
    0x0000002a,
    0x00000101,
    0x0004003d,
    0x00000027,
    0x00000103,
    0x00000102,
    0x0004007c,
    0x0000000d,
    0x00000104,
    0x00000103,
    0x000500b0,
    0x000000d9,
    0x00000105,
    0x00000100,
    0x00000104,
    0x000400fa,
    0x00000105,
    0x000000fc,
    0x000000fd,
    0x000200f8,
    0x000000fc,
    0x0004003d,
    0x000000e7,
    0x00000107,
    0x000000e9,
    0x0004003d,
    0x0000000d,
    0x0000010f,
    0x000000fa,
    0x00060041,
    0x00000110,
    0x00000111,
    0x0000010d,
    0x0000010e,
    0x0000010f,
    0x0004003d,
    0x00000108,
    0x00000112,
    0x00000111,
    0x0008004f,
    0x0000000f,
    0x00000113,
    0x00000112,
    0x00000112,
    0x00000000,
    0x00000001,
    0x00000002,
    0x00050091,
    0x0000000f,
    0x00000114,
    0x00000107,
    0x00000113,
    0x0003003e,
    0x00000106,
    0x00000114,
    0x0004003d,
    0x0000000f,
    0x00000116,
    0x000000bc,
    0x0004003d,
    0x0000000f,
    0x00000117,
    0x00000106,
    0x00050094,
    0x00000006,
    0x00000118,
    0x00000116,
    0x00000117,
    0x00050085,
    0x00000006,
    0x00000119,
    0x00000032,
    0x00000118,
    0x0004003d,
    0x0000000f,
    0x0000011a,
    0x00000106,
    0x0005008e,
    0x0000000f,
    0x0000011b,
    0x0000011a,
    0x00000119,
    0x0004003d,
    0x0000000f,
    0x0000011c,
    0x000000bc,
    0x00050083,
    0x0000000f,
    0x0000011d,
    0x0000011b,
    0x0000011c,
    0x0006000c,
    0x0000000f,
    0x0000011e,
    0x00000001,
    0x00000045,
    0x0000011d,
    0x0003003e,
    0x00000115,
    0x0000011e,
    0x0004003d,
    0x0000000f,
    0x00000120,
    0x000000ab,
    0x0004003d,
    0x0000000f,
    0x00000121,
    0x00000115,
    0x00050094,
    0x00000006,
    0x00000122,
    0x00000120,
    0x00000121,
    0x0007000c,
    0x00000006,
    0x00000123,
    0x00000001,
    0x00000028,
    0x00000122,
    0x00000093,
    0x0003003e,
    0x0000011f,
    0x00000123,
    0x0004003d,
    0x00000006,
    0x00000124,
    0x0000011f,
    0x000500ba,
    0x000000d9,
    0x00000125,
    0x00000124,
    0x00000093,
    0x000300f7,
    0x00000127,
    0x00000000,
    0x000400fa,
    0x00000125,
    0x00000126,
    0x00000127,
    0x000200f8,
    0x00000126,
    0x0004003d,
    0x0000000f,
    0x0000012a,
    0x000000ab,
    0x0003003e,
    0x00000129,
    0x0000012a,
    0x0004003d,
    0x0000000f,
    0x0000012c,
    0x00000106,
    0x0003003e,
    0x0000012b,
    0x0000012c,
    0x00050041,
    0x0000002e,
    0x0000012e,
    0x0000002a,
    0x0000010e,
    0x0004003d,
    0x00000006,
    0x0000012f,
    0x0000012e,
    0x0003003e,
    0x0000012d,
    0x0000012f,
    0x00070039,
    0x00000006,
    0x00000130,
    0x0000001b,
    0x00000129,
    0x0000012b,
    0x0000012d,
    0x0003003e,
    0x00000128,
    0x00000130,
    0x0004003d,
    0x0000000f,
    0x00000132,
    0x000000ab,
    0x0004003d,
    0x0000000f,
    0x00000133,
    0x00000106,
    0x00050094,
    0x00000006,
    0x00000134,
    0x00000132,
    0x00000133,
    0x0007000c,
    0x00000006,
    0x00000135,
    0x00000001,
    0x00000028,
    0x00000134,
    0x00000093,
    0x0003003e,
    0x00000131,
    0x00000135,
    0x0004003d,
    0x0000000f,
    0x00000137,
    0x00000106,
    0x0004003d,
    0x0000000f,
    0x00000138,
    0x000000bc,
    0x00050094,
    0x00000006,
    0x00000139,
    0x00000137,
    0x00000138,
    0x0007000c,
    0x00000006,
    0x0000013a,
    0x00000001,
    0x00000028,
    0x00000139,
    0x00000093,
    0x0003003e,
    0x00000136,
    0x0000013a,
    0x0004003d,
    0x00000006,
    0x0000013c,
    0x00000128,
    0x0004003d,
    0x00000006,
    0x0000013d,
    0x00000131,
    0x00050085,
    0x00000006,
    0x0000013e,
    0x0000013c,
    0x0000013d,
    0x0004003d,
    0x00000006,
    0x00000140,
    0x00000136,
    0x00050085,
    0x00000006,
    0x00000141,
    0x0000013f,
    0x00000140,
    0x00050088,
    0x00000006,
    0x00000142,
    0x0000013e,
    0x00000141,
    0x00050081,
    0x00000006,
    0x00000144,
    0x00000142,
    0x00000143,
    0x0003003e,
    0x0000013b,
    0x00000144,
    0x0004003d,
    0x00000006,
    0x00000148,
    0x000000cc,
    0x00050085,
    0x00000006,
    0x00000149,
    0x00000147,
    0x00000148,
    0x0004003d,
    0x00000006,
    0x0000014a,
    0x000000cc,
    0x00050085,
    0x00000006,
    0x0000014b,
    0x00000149,
    0x0000014a,
    0x00050088,
    0x00000006,
    0x0000014c,
    0x00000146,
    0x0000014b,
    0x0003003e,
    0x00000145,
    0x0000014c,
    0x00050041,
    0x000000c7,
    0x0000014e,
    0x0000002a,
    0x00000101,
    0x0004003d,
    0x00000027,
    0x0000014f,
    0x0000014e,
    0x0004006f,
    0x00000006,
    0x00000150,
    0x0000014f,
    0x0004003d,
    0x00000006,
    0x00000151,
    0x0000013b,
    0x00050085,
    0x00000006,
    0x00000152,
    0x00000150,
    0x00000151,
    0x00050081,
    0x00000006,
    0x00000153,
    0x00000152,
    0x00000143,
    0x00050088,
    0x00000006,
    0x00000154,
    0x00000034,
    0x00000153,
    0x0003003e,
    0x0000014d,
    0x00000154,
    0x00050041,
    0x0000002e,
    0x00000156,
    0x0000002a,
    0x0000010e,
    0x0004003d,
    0x00000006,
    0x00000157,
    0x00000156,
    0x000500b4,
    0x000000d9,
    0x00000158,
    0x00000157,
    0x00000093,
    0x000300f7,
    0x0000015b,
    0x00000000,
    0x000400fa,
    0x00000158,
    0x0000015a,
    0x0000015c,
    0x000200f8,
    0x0000015a,
    0x0003003e,
    0x00000159,
    0x00000093,
    0x000200f9,
    0x0000015b,
    0x000200f8,
    0x0000015c,
    0x0004003d,
    0x00000006,
    0x0000015d,
    0x0000014d,
    0x0004003d,
    0x00000006,
    0x0000015e,
    0x00000145,
    0x00050088,
    0x00000006,
    0x0000015f,
    0x0000015d,
    0x0000015e,
    0x0006000c,
    0x00000006,
    0x00000160,
    0x00000001,
    0x0000001e,
    0x0000015f,
    0x00050085,
    0x00000006,
    0x00000161,
    0x0000001e,
    0x00000160,
    0x0003003e,
    0x00000159,
    0x00000161,
    0x000200f9,
    0x0000015b,
    0x000200f8,
    0x0000015b,
    0x0004003d,
    0x00000006,
    0x00000162,
    0x00000159,
    0x0003003e,
    0x00000155,
    0x00000162,
    0x0004003d,
    0x000000c2,
    0x00000163,
    0x000000c4,
    0x0004003d,
    0x0000000f,
    0x00000164,
    0x00000115,
    0x00050041,
    0x000000c7,
    0x00000165,
    0x0000002a,
    0x000000c6,
    0x0004003d,
    0x00000027,
    0x00000166,
    0x00000165,
    0x0004006f,
    0x00000006,
    0x00000167,
    0x00000166,
    0x0004003d,
    0x00000006,
    0x00000168,
    0x00000155,
    0x00050081,
    0x00000006,
    0x00000169,
    0x00000167,
    0x00000168,
    0x00070058,
    0x00000108,
    0x0000016a,
    0x00000163,
    0x00000164,
    0x00000002,
    0x00000169,
    0x0008004f,
    0x0000000f,
    0x0000016b,
    0x0000016a,
    0x0000016a,
    0x00000000,
    0x00000001,
    0x00000002,
    0x0004003d,
    0x00000006,
    0x0000016c,
    0x0000011f,
    0x0005008e,
    0x0000000f,
    0x0000016d,
    0x0000016b,
    0x0000016c,
    0x0004003d,
    0x0000000f,
    0x0000016e,
    0x000000d1,
    0x00050081,
    0x0000000f,
    0x0000016f,
    0x0000016e,
    0x0000016d,
    0x0003003e,
    0x000000d1,
    0x0000016f,
    0x0004003d,
    0x00000006,
    0x00000170,
    0x0000011f,
    0x0004003d,
    0x00000006,
    0x00000171,
    0x000000d3,
    0x00050081,
    0x00000006,
    0x00000172,
    0x00000171,
    0x00000170,
    0x0003003e,
    0x000000d3,
    0x00000172,
    0x000200f9,
    0x00000127,
    0x000200f8,
    0x00000127,
    0x000200f9,
    0x000000fe,
    0x000200f8,
    0x000000fe,
    0x0004003d,
    0x0000000d,
    0x00000173,
    0x000000fa,
    0x00050080,
    0x0000000d,
    0x00000174,
    0x00000173,
    0x0000002b,
    0x0003003e,
    0x000000fa,
    0x00000174,
    0x000200f9,
    0x000000fb,
    0x000200f8,
    0x000000fd,
    0x0004003d,
    0x0000000f,
    0x00000175,
    0x000000d1,
    0x0004003d,
    0x00000006,
    0x00000176,
    0x000000d3,
    0x00060050,
    0x0000000f,
    0x00000177,
    0x00000176,
    0x00000176,
    0x00000176,
    0x00050088,
    0x0000000f,
    0x00000178,
    0x00000175,
    0x00000177,
    0x0003003e,
    0x000000d1,
    0x00000178,
    0x0004003d,
    0x00000179,
    0x0000017c,
    0x0000017b,
    0x0004003d,
    0x000000ac,
    0x0000017d,
    0x000000ae,
    0x0004007c,
    0x0000017e,
    0x0000017f,
    0x0000017d,
    0x0004003d,
    0x0000000f,
    0x00000180,
    0x000000d1,
    0x00050051,
    0x00000006,
    0x00000181,
    0x00000180,
    0x00000000,
    0x00050051,
    0x00000006,
    0x00000182,
    0x00000180,
    0x00000001,
    0x00050051,
    0x00000006,
    0x00000183,
    0x00000180,
    0x00000002,
    0x00070050,
    0x00000108,
    0x00000184,
    0x00000181,
    0x00000182,
    0x00000183,
    0x00000034,
    0x00040063,
    0x0000017c,
    0x0000017f,
    0x00000184,
    0x000100fd,
    0x00010038,
    0x00050036,
    0x00000006,
    0x0000000b,
    0x00000000,
    0x00000008,
    0x00030037,
    0x00000007,
    0x00000009,
    0x00030037,
    0x00000007,
    0x0000000a,
    0x000200f8,
    0x0000000c,
    0x0004003d,
    0x00000006,
    0x0000001d,
    0x00000009,
    0x00050081,
    0x00000006,
    0x0000001f,
    0x0000001d,
    0x0000001e,
    0x0004003d,
    0x00000006,
    0x00000020,
    0x0000000a,
    0x00050088,
    0x00000006,
    0x00000021,
    0x0000001f,
    0x00000020,
    0x000200fe,
    0x00000021,
    0x00010038,
    0x00050036,
    0x0000000f,
    0x00000014,
    0x00000000,
    0x00000010,
    0x00030037,
    0x0000000e,
    0x00000011,
    0x00030037,
    0x0000000e,
    0x00000012,
    0x00030037,
    0x0000000e,
    0x00000013,
    0x000200f8,
    0x00000015,
    0x0004003b,
    0x00000007,
    0x00000024,
    0x00000007,
    0x0004003b,
    0x00000007,
    0x0000002c,
    0x00000007,
    0x0004003b,
    0x00000007,
    0x0000002d,
    0x00000007,
    0x0004003b,
    0x00000007,
    0x00000036,
    0x00000007,
    0x0004003b,
    0x00000007,
    0x00000039,
    0x00000007,
    0x0004003b,
    0x00000007,
    0x0000003a,
    0x00000007,
    0x0004003b,
    0x00000007,
    0x00000048,
    0x00000007,
    0x0004003b,
    0x00000007,
    0x0000004a,
    0x00000007,
    0x0004003b,
    0x00000007,
    0x0000004d,
    0x00000007,
    0x0004003b,
    0x00000007,
    0x00000066,
    0x00000007,
    0x0004003b,
    0x00000016,
    0x00000074,
    0x00000007,
    0x0004003d,
    0x0000000d,
    0x00000025,
    0x00000012,
    0x00040070,
    0x00000006,
    0x00000026,
    0x00000025,
    0x0003003e,
    0x0000002c,
    0x00000026,
    0x00050041,
    0x0000002e,
    0x0000002f,
    0x0000002a,
    0x0000002b,
    0x0004003d,
    0x00000006,
    0x00000030,
    0x0000002f,
    0x0003003e,
    0x0000002d,
    0x00000030,
    0x00060039,
    0x00000006,
    0x00000031,
    0x0000000b,
    0x0000002c,
    0x0000002d,
    0x00050085,
    0x00000006,
    0x00000033,
    0x00000031,
    0x00000032,
    0x00050083,
    0x00000006,
    0x00000035,
    0x00000033,
    0x00000034,
    0x0003003e,
    0x00000024,
    0x00000035,
    0x0004003d,
    0x0000000d,
    0x00000037,
    0x00000013,
    0x00040070,
    0x00000006,
    0x00000038,
    0x00000037,
    0x0003003e,
    0x00000039,
    0x00000038,
    0x00050041,
    0x0000002e,
    0x0000003b,
    0x0000002a,
    0x0000002b,
    0x0004003d,
    0x00000006,
    0x0000003c,
    0x0000003b,
    0x0003003e,
    0x0000003a,
    0x0000003c,
    0x00060039,
    0x00000006,
    0x0000003d,
    0x0000000b,
    0x00000039,
    0x0000003a,
    0x00050085,
    0x00000006,
    0x0000003e,
    0x0000003d,
    0x00000032,
    0x00050083,
    0x00000006,
    0x0000003f,
    0x0000003e,
    0x00000034,
    0x0003003e,
    0x00000036,
    0x0000003f,
    0x0004003d,
    0x0000000d,
    0x00000040,
    0x00000011,
    0x000300f7,
    0x00000047,
    0x00000000,
    0x000f00fb,
    0x00000040,
    0x00000047,
    0x00000004,
    0x00000041,
    0x00000005,
    0x00000042,
    0x00000001,
    0x00000043,
    0x00000000,
    0x00000044,
    0x00000002,
    0x00000045,
    0x00000003,
    0x00000046,
    0x000200f8,
    0x00000041,
    0x0004003d,
    0x00000006,
    0x00000049,
    0x00000024,
    0x0003003e,
    0x00000048,
    0x00000049,
    0x0004003d,
    0x00000006,
    0x0000004b,
    0x00000036,
    0x0004007f,
    0x00000006,
    0x0000004c,
    0x0000004b,
    0x0003003e,
    0x0000004a,
    0x0000004c,
    0x0003003e,
    0x0000004d,
    0x00000034,
    0x000200f9,
    0x00000047,
    0x000200f8,
    0x00000042,
    0x0004003d,
    0x00000006,
    0x0000004f,
    0x00000024,
    0x0004007f,
    0x00000006,
    0x00000050,
    0x0000004f,
    0x0003003e,
    0x00000048,
    0x00000050,
    0x0004003d,
    0x00000006,
    0x00000051,
    0x00000036,
    0x0004007f,
    0x00000006,
    0x00000052,
    0x00000051,
    0x0003003e,
    0x0000004a,
    0x00000052,
    0x0003003e,
    0x0000004d,
    0x00000053,
    0x000200f9,
    0x00000047,
    0x000200f8,
    0x00000043,
    0x0003003e,
    0x00000048,
    0x00000053,
    0x0004003d,
    0x00000006,
    0x00000055,
    0x00000036,
    0x0004007f,
    0x00000006,
    0x00000056,
    0x00000055,
    0x0003003e,
    0x0000004a,
    0x00000056,
    0x0004003d,
    0x00000006,
    0x00000057,
    0x00000024,
    0x0003003e,
    0x0000004d,
    0x00000057,
    0x000200f9,
    0x00000047,
    0x000200f8,
    0x00000044,
    0x0003003e,
    0x00000048,
    0x00000034,
    0x0004003d,
    0x00000006,
    0x00000059,
    0x00000036,
    0x0004007f,
    0x00000006,
    0x0000005a,
    0x00000059,
    0x0003003e,
    0x0000004a,
    0x0000005a,
    0x0004003d,
    0x00000006,
    0x0000005b,
    0x00000024,
    0x0004007f,
    0x00000006,
    0x0000005c,
    0x0000005b,
    0x0003003e,
    0x0000004d,
    0x0000005c,
    0x000200f9,
    0x00000047,
    0x000200f8,
    0x00000045,
    0x0004003d,
    0x00000006,
    0x0000005e,
    0x00000024,
    0x0003003e,
    0x00000048,
    0x0000005e,
    0x0003003e,
    0x0000004a,
    0x00000034,
    0x0004003d,
    0x00000006,
    0x0000005f,
    0x00000036,
    0x0003003e,
    0x0000004d,
    0x0000005f,
    0x000200f9,
    0x00000047,
    0x000200f8,
    0x00000046,
    0x0004003d,
    0x00000006,
    0x00000061,
    0x00000024,
    0x0003003e,
    0x00000048,
    0x00000061,
    0x0003003e,
    0x0000004a,
    0x00000053,
    0x0004003d,
    0x00000006,
    0x00000062,
    0x00000036,
    0x0004007f,
    0x00000006,
    0x00000063,
    0x00000062,
    0x0003003e,
    0x0000004d,
    0x00000063,
    0x000200f9,
    0x00000047,
    0x000200f8,
    0x00000047,
    0x0004003d,
    0x00000006,
    0x00000067,
    0x00000048,
    0x0004003d,
    0x00000006,
    0x00000068,
    0x00000048,
    0x00050085,
    0x00000006,
    0x00000069,
    0x00000067,
    0x00000068,
    0x0004003d,
    0x00000006,
    0x0000006a,
    0x0000004a,
    0x0004003d,
    0x00000006,
    0x0000006b,
    0x0000004a,
    0x00050085,
    0x00000006,
    0x0000006c,
    0x0000006a,
    0x0000006b,
    0x00050081,
    0x00000006,
    0x0000006d,
    0x00000069,
    0x0000006c,
    0x0004003d,
    0x00000006,
    0x0000006e,
    0x0000004d,
    0x0004003d,
    0x00000006,
    0x0000006f,
    0x0000004d,
    0x00050085,
    0x00000006,
    0x00000070,
    0x0000006e,
    0x0000006f,
    0x00050081,
    0x00000006,
    0x00000071,
    0x0000006d,
    0x00000070,
    0x0006000c,
    0x00000006,
    0x00000072,
    0x00000001,
    0x0000001f,
    0x00000071,
    0x00050088,
    0x00000006,
    0x00000073,
    0x00000034,
    0x00000072,
    0x0003003e,
    0x00000066,
    0x00000073,
    0x0004003d,
    0x00000006,
    0x00000075,
    0x00000048,
    0x0004003d,
    0x00000006,
    0x00000076,
    0x00000066,
    0x00050085,
    0x00000006,
    0x00000077,
    0x00000075,
    0x00000076,
    0x00050041,
    0x00000007,
    0x00000079,
    0x00000074,
    0x00000078,
    0x0003003e,
    0x00000079,
    0x00000077,
    0x0004003d,
    0x00000006,
    0x0000007a,
    0x0000004a,
    0x0004003d,
    0x00000006,
    0x0000007b,
    0x00000066,
    0x00050085,
    0x00000006,
    0x0000007c,
    0x0000007a,
    0x0000007b,
    0x00050041,
    0x00000007,
    0x0000007e,
    0x00000074,
    0x0000007d,
    0x0003003e,
    0x0000007e,
    0x0000007c,
    0x0004003d,
    0x00000006,
    0x0000007f,
    0x0000004d,
    0x0004003d,
    0x00000006,
    0x00000080,
    0x00000066,
    0x00050085,
    0x00000006,
    0x00000081,
    0x0000007f,
    0x00000080,
    0x00050041,
    0x00000007,
    0x00000083,
    0x00000074,
    0x00000082,
    0x0003003e,
    0x00000083,
    0x00000081,
    0x0004003d,
    0x0000000f,
    0x00000084,
    0x00000074,
    0x000200fe,
    0x00000084,
    0x00010038,
    0x00050036,
    0x00000006,
    0x0000001b,
    0x00000000,
    0x00000017,
    0x00030037,
    0x00000016,
    0x00000018,
    0x00030037,
    0x00000016,
    0x00000019,
    0x00030037,
    0x00000007,
    0x0000001a,
    0x000200f8,
    0x0000001c,
    0x0004003b,
    0x00000007,
    0x00000087,
    0x00000007,
    0x0004003b,
    0x00000007,
    0x0000008b,
    0x00000007,
    0x0004003b,
    0x00000007,
    0x0000008f,
    0x00000007,
    0x0004003b,
    0x00000007,
    0x00000095,
    0x00000007,
    0x0004003b,
    0x00000007,
    0x00000099,
    0x00000007,
    0x0004003b,
    0x00000007,
    0x0000009b,
    0x00000007,
    0x0004003d,
    0x00000006,
    0x00000088,
    0x0000001a,
    0x0004003d,
    0x00000006,
    0x00000089,
    0x0000001a,
    0x00050085,
    0x00000006,
    0x0000008a,
    0x00000088,
    0x00000089,
    0x0003003e,
    0x00000087,
    0x0000008a,
    0x0004003d,
    0x00000006,
    0x0000008c,
    0x00000087,
    0x0004003d,
    0x00000006,
    0x0000008d,
    0x00000087,
    0x00050085,
    0x00000006,
    0x0000008e,
    0x0000008c,
    0x0000008d,
    0x0003003e,
    0x0000008b,
    0x0000008e,
    0x0004003d,
    0x0000000f,
    0x00000090,
    0x00000018,
    0x0004003d,
    0x0000000f,
    0x00000091,
    0x00000019,
    0x00050094,
    0x00000006,
    0x00000092,
    0x00000090,
    0x00000091,
    0x0007000c,
    0x00000006,
    0x00000094,
    0x00000001,
    0x00000028,
    0x00000092,
    0x00000093,
    0x0003003e,
    0x0000008f,
    0x00000094,
    0x0004003d,
    0x00000006,
    0x00000096,
    0x0000008f,
    0x0004003d,
    0x00000006,
    0x00000097,
    0x0000008f,
    0x00050085,
    0x00000006,
    0x00000098,
    0x00000096,
    0x00000097,
    0x0003003e,
    0x00000095,
    0x00000098,
    0x0004003d,
    0x00000006,
    0x0000009a,
    0x0000008b,
    0x0003003e,
    0x00000099,
    0x0000009a,
    0x0004003d,
    0x00000006,
    0x0000009c,
    0x00000095,
    0x0004003d,
    0x00000006,
    0x0000009d,
    0x0000008b,
    0x00050083,
    0x00000006,
    0x0000009e,
    0x0000009d,
    0x00000034,
    0x00050085,
    0x00000006,
    0x0000009f,
    0x0000009c,
    0x0000009e,
    0x00050081,
    0x00000006,
    0x000000a0,
    0x0000009f,
    0x00000034,
    0x0003003e,
    0x0000009b,
    0x000000a0,
    0x0004003d,
    0x00000006,
    0x000000a2,
    0x0000009b,
    0x00050085,
    0x00000006,
    0x000000a3,
    0x000000a1,
    0x000000a2,
    0x0004003d,
    0x00000006,
    0x000000a4,
    0x0000009b,
    0x00050085,
    0x00000006,
    0x000000a5,
    0x000000a3,
    0x000000a4,
    0x0003003e,
    0x0000009b,
    0x000000a5,
    0x0004003d,
    0x00000006,
    0x000000a6,
    0x00000099,
    0x0004003d,
    0x00000006,
    0x000000a7,
    0x0000009b,
    0x00050088,
    0x00000006,
    0x000000a8,
    0x000000a6,
    0x000000a7,
    0x000200fe,
    0x000000a8,
    0x00010038,
};
#else
static const char* g_cs_src = R"(
// ------------------------------------------------------------------
// CONSTANTS --------------------------------------------------------
// ------------------------------------------------------------------

#define LOCAL_SIZE 8
#define POS_X 0
#define NEG_X 1
#define POS_Y 2
#define NEG_Y 3
#define POS_Z 4
#define NEG_Z 5
#define PI 3.14159265359
#define MAX_SAMPLES 64

// ------------------------------------------------------------------
// INPUTS -----------------------------------------------------------
// ------------------------------------------------------------------

layout(local_size_x = LOCAL_SIZE, local_size_y = LOCAL_SIZE, local_size_z = 1) in;

// ------------------------------------------------------------------
// OUTPUTS ----------------------------------------------------------
// ------------------------------------------------------------------

layout(binding = 0, rgba16f) uniform imageCube i_Prefiltered;

// ------------------------------------------------------------------
// UNIFORM BUFFERS --------------------------------------------------
// ------------------------------------------------------------------

layout(std140) uniform u_SampleDirections
{
    vec4 sample_directions[MAX_SAMPLES];
};

// ------------------------------------------------------------------
// SAMPLERS ---------------------------------------------------------
// ------------------------------------------------------------------

uniform samplerCube s_EnvMap;
uniform float       u_Roughness;
uniform float       u_Width;
uniform float       u_Height;
uniform int         u_StartMipLevel;
uniform int         u_SampleCount;

// ------------------------------------------------------------------
// FUNCTIONS --------------------------------------------------------
// ------------------------------------------------------------------

float unlerp(float val, float max_val)
{
    return (val + 0.5) / max_val;
}

// ------------------------------------------------------------------

vec3 calculate_direction(uint face, uint face_x, uint face_y)
{
    float s = unlerp(float(face_x), u_Width) * 2.0 - 1.0;
    float t = unlerp(float(face_y), u_Height) * 2.0 - 1.0;
    float x, y, z;

    switch (face)
    {
        case POS_Z:
            x = s;
            y = -t;
            z = 1;
            break;
        case NEG_Z:
            x = -s;
            y = -t;
            z = -1;
            break;
        case NEG_X:
            x = -1;
            y = -t;
            z = s;
            break;
        case POS_X:
            x = 1;
            y = -t;
            z = -s;
            break;
        case POS_Y:
            x = s;
            y = 1;
            z = t;
            break;
        case NEG_Y:
            x = s;
            y = -1;
            z = -t;
            break;
    }

    vec3  d;
    float inv_len = 1.0 / sqrt(x * x + y * y + z * z);
    d.x           = x * inv_len;
    d.y           = y * inv_len;
    d.z           = z * inv_len;

    return d;
}

// ----------------------------------------------------------------------------

float distribution_ggx(vec3 N, vec3 H, float roughness)
{
    float a      = roughness * roughness;
    float a2     = a * a;
    float NdotH  = max(dot(N, H), 0.0);
    float NdotH2 = NdotH * NdotH;

    float nom   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom       = PI * denom * denom;

    return nom / denom;
}

// ------------------------------------------------------------------
// MAIN -------------------------------------------------------------
// ------------------------------------------------------------------

void main()
{
    vec3 N = calculate_direction(gl_GlobalInvocationID.z, gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);

    // make the simplyfying assumption that V equals R equals the normal
    vec3  R          = N;
    vec3  V          = R;
    ivec2 size       = textureSize(s_EnvMap, u_StartMipLevel);
    float resolution = float(size.x);

    vec3  prefiltered_color = vec3(0.0);
    float total_weight      = 0.0;

    // Compute a matrix to rotate the samples
    vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent   = normalize(cross(up, N));
    vec3 bitangent = cross(N, tangent);

    mat3 tangent_to_world = mat3(tangent, bitangent, N);

    for (uint i = 0u; i < u_SampleCount; ++i)
    {
        // generates a sample vector that's biased towards the preferred alignment direction (importance sampling).
        vec3 H = tangent_to_world * sample_directions[i].xyz;
        vec3 L = normalize(2.0 * dot(V, H) * H - V);

        float NdotL = max(dot(N, L), 0.0);

        if (NdotL > 0.0)
        {
            // sample from the environment's mip level based on roughness/pdf
            float D     = distribution_ggx(N, H, u_Roughness);
            float NdotH = max(dot(N, H), 0.0);
            float HdotV = max(dot(H, V), 0.0);
            float pdf   = D * NdotH / (4.0 * HdotV) + 0.0001;

            float sa_texel  = 4.0 * PI / (6.0 * resolution * resolution);
            float sa_sample = 1.0 / (float(u_SampleCount) * pdf + 0.0001);

            float mip_level = u_Roughness == 0.0 ? 0.0 : 0.5 * log2(sa_sample / sa_texel);

            prefiltered_color += textureLod(s_EnvMap, L, u_StartMipLevel + mip_level).rgb * NdotL;
            total_weight += NdotL;
        }
    }

    prefiltered_color = prefiltered_color / total_weight;

    imageStore(i_Prefiltered, ivec3(gl_GlobalInvocationID), vec4(prefiltered_color, 1.0));
}

// ------------------------------------------------------------------
)";
#endif

// -----------------------------------------------------------------------------------------------------------------------------------

struct PushConstants
{
    float roughness;
    float size;
    int   start_mip_level;
    int   sample_count;
};

// -----------------------------------------------------------------------------------------------------------------------------------

float radical_inverse_vdc(uint32_t bits)
{
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}

// -----------------------------------------------------------------------------------------------------------------------------------

glm::vec2 hammersley(uint32_t i, uint32_t N)
{
    return glm::vec2(float(i) / float(N), radical_inverse_vdc(i));
}

// -----------------------------------------------------------------------------------------------------------------------------------

CubemapPrefiler::CubemapPrefiler(
#if defined(DWSF_VULKAN)
    vk::Backend::Ptr backend,
    vk::Image::Ptr   cubemap
#else
    gl::TextureCube::Ptr cubemap
#endif
    )
#if !defined(DWSF_VULKAN)
    :
    m_cubemap(cubemap)
#endif
{
    m_size = cubemap->width();

#if defined(DWSF_VULKAN)
    // Create images and image views
    m_cubemap_image_view = vk::ImageView::create(backend, cubemap, VK_IMAGE_VIEW_TYPE_CUBE, VK_IMAGE_ASPECT_COLOR_BIT, 0, cubemap->mip_levels(), 0, 6);
    m_cubemap_image_view->set_name("Prefiltered Src Image");

    m_image = vk::Image::create(backend, VK_IMAGE_TYPE_2D, PREFILTER_MAP_SIZE, PREFILTER_MAP_SIZE, 1, 5, 6, VK_FORMAT_R16G16B16A16_SFLOAT, VMA_MEMORY_USAGE_GPU_ONLY, VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_STORAGE_BIT, VK_SAMPLE_COUNT_1_BIT, VK_IMAGE_LAYOUT_UNDEFINED, 0, nullptr, VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT);
    m_image->set_name("Prefiltered Dst Image");

    m_image_view = vk::ImageView::create(backend, m_image, VK_IMAGE_VIEW_TYPE_CUBE, VK_IMAGE_ASPECT_COLOR_BIT, 0, 5, 0, 6);
    m_image_view->set_name("Prefiltered Dst Image View");

    m_mip_image_views.resize(PREFILTER_MIP_LEVELS);
    m_sample_directions_ubos.resize(PREFILTER_MIP_LEVELS);

    for (int i = 0; i < PREFILTER_MIP_LEVELS; i++)
    {
        m_mip_image_views[i] = vk::ImageView::create(backend, m_image, VK_IMAGE_VIEW_TYPE_CUBE, VK_IMAGE_ASPECT_COLOR_BIT, i, 1, 0, 6);
        m_mip_image_views[i]->set_name("Prefiltered Image View Mip " + std::to_string(i));
        m_sample_directions_ubos[i] = vk::Buffer::create(backend, VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT, sizeof(glm::vec4) * MAX_PREFILTER_SAMPLES, VMA_MEMORY_USAGE_CPU_TO_GPU, VMA_ALLOCATION_CREATE_MAPPED_BIT);
        m_sample_directions_ubos[i]->set_name("Sample Directions UBO " + std::to_string(i));
    }

    precompute_prefilter_constants();

    // Create descriptor set layout

    vk::DescriptorSetLayout::Desc ds_layout_desc;

    ds_layout_desc.add_binding(0, VK_DESCRIPTOR_TYPE_STORAGE_IMAGE, 1, VK_SHADER_STAGE_COMPUTE_BIT);
    ds_layout_desc.add_binding(1, VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, 1, VK_SHADER_STAGE_COMPUTE_BIT);
    ds_layout_desc.add_binding(2, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, 1, VK_SHADER_STAGE_COMPUTE_BIT);

    m_ds_layout = vk::DescriptorSetLayout::create(backend, ds_layout_desc);

    // Allocate descriptor sets
    VkDescriptorImageInfo read_image;

    read_image.sampler     = backend->bilinear_sampler()->handle();
    read_image.imageView   = m_cubemap_image_view->handle();
    read_image.imageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;

    for (int i = 0; i < PREFILTER_MIP_LEVELS; i++)
    {
        auto ds = backend->allocate_descriptor_set(m_ds_layout);

        VkWriteDescriptorSet write_data[3];
        DW_ZERO_MEMORY(write_data[0]);
        DW_ZERO_MEMORY(write_data[1]);
        DW_ZERO_MEMORY(write_data[2]);

        VkDescriptorImageInfo write_image;

        write_image.sampler     = VK_NULL_HANDLE;
        write_image.imageView   = m_mip_image_views[i]->handle();
        write_image.imageLayout = VK_IMAGE_LAYOUT_GENERAL;

        VkDescriptorBufferInfo buffer_info;

        buffer_info.buffer = m_sample_directions_ubos[i]->handle();
        buffer_info.offset = 0;
        buffer_info.range  = VK_WHOLE_SIZE;

        write_data[0].sType           = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
        write_data[0].descriptorCount = 1;
        write_data[0].descriptorType  = VK_DESCRIPTOR_TYPE_STORAGE_IMAGE;
        write_data[0].pImageInfo      = &write_image;
        write_data[0].dstBinding      = 0;
        write_data[0].dstSet          = ds->handle();

        write_data[1].sType           = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
        write_data[1].descriptorCount = 1;
        write_data[1].descriptorType  = VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER;
        write_data[1].pImageInfo      = &read_image;
        write_data[1].dstBinding      = 1;
        write_data[1].dstSet          = ds->handle();

        write_data[2].sType           = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
        write_data[2].descriptorCount = 1;
        write_data[2].descriptorType  = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;
        write_data[2].pBufferInfo     = &buffer_info;
        write_data[2].dstBinding      = 2;
        write_data[2].dstSet          = ds->handle();

        vkUpdateDescriptorSets(backend->device(), 3, write_data, 0, nullptr);

        m_ds.push_back(ds);
    }

    // Pipeline Layouts

    vk::PipelineLayout::Desc pl_desc;

    pl_desc.add_descriptor_set_layout(m_ds_layout);
    pl_desc.add_push_constant_range(VK_SHADER_STAGE_COMPUTE_BIT, 0, sizeof(PushConstants));

    m_pipeline_layout = dw::vk::PipelineLayout::create(backend, pl_desc);

    // Load shader modules

    std::vector<char> spirv;

    spirv.resize(kPREFILTER_SPIRV_size);
    memcpy(&spirv[0], &kPREFILTER_SPIRV_data[0], kPREFILTER_SPIRV_size);

    vk::ShaderModule::Ptr module = dw::vk::ShaderModule::create(backend, spirv);

    // Create pipeline

    vk::ComputePipeline::Desc comp_desc;

    comp_desc.set_pipeline_layout(m_pipeline_layout);
    comp_desc.set_shader_stage(module, "main");

    m_pipeline = vk::ComputePipeline::create(backend, comp_desc);

#else
    m_texture = gl::TextureCube::create(PREFILTER_MAP_SIZE, PREFILTER_MAP_SIZE, 1, PREFILTER_MIP_LEVELS, GL_RGBA16F, GL_RGBA, GL_HALF_FLOAT);

    m_sample_directions_ubos.resize(PREFILTER_MIP_LEVELS);

    for (int i = 0; i < PREFILTER_MIP_LEVELS; i++)
        m_sample_directions_ubos[i] = gl::UniformBuffer::create(GL_DYNAMIC_DRAW, sizeof(glm::vec4) * MAX_PREFILTER_SAMPLES);

    precompute_prefilter_constants();

    // Create general shaders
    m_cs = gl::Shader::create(GL_COMPUTE_SHADER, g_cs_src);

    if (!m_cs->compiled())
        DW_LOG_FATAL("Failed to create Shaders");

    // Create general shader program
    m_program = gl::Program::create({ m_cs });

    if (!m_program)
        DW_LOG_FATAL("Failed to create Shader Program");

    m_program->uniform_block_binding("u_SampleDirections", 0);

#endif
}

// -----------------------------------------------------------------------------------------------------------------------------------

CubemapPrefiler::~CubemapPrefiler()
{
#if defined(DWSF_VULKAN)
    m_pipeline.reset();
    m_pipeline_layout.reset();
    m_ds_layout.reset();
    m_ds.clear();
    m_cubemap_image_view.reset();
    m_image_view.reset();
    m_mip_image_views.clear();
    m_image.reset();
    m_sample_directions_ubos.clear();
#else
    m_program.reset();
    m_cs.reset();
    m_cubemap.reset();
    m_texture.reset();
    m_sample_directions_ubos.clear();
#endif
}

// -----------------------------------------------------------------------------------------------------------------------------------

void CubemapPrefiler::update(
#if defined(DWSF_VULKAN)
    vk::CommandBuffer::Ptr cmd_buf
#endif
)
{
#if defined(DWSF_VULKAN)
    VkImageSubresourceRange subresource_range = { VK_IMAGE_ASPECT_COLOR_BIT, 0, PREFILTER_MIP_LEVELS, 0, 6 };

    dw::vk::utilities::set_image_layout(
        cmd_buf->handle(),
        m_image->handle(),
        VK_IMAGE_LAYOUT_UNDEFINED,
        VK_IMAGE_LAYOUT_GENERAL,
        subresource_range);

    int32_t start_level = (m_size / PREFILTER_MAP_SIZE) - 1;

    for (int mip = 0; mip < PREFILTER_MIP_LEVELS; mip++)
    {
        uint32_t mip_width  = PREFILTER_MAP_SIZE * std::pow(0.5, mip);
        uint32_t mip_height = PREFILTER_MAP_SIZE * std::pow(0.5, mip);

        vkCmdBindPipeline(cmd_buf->handle(), VK_PIPELINE_BIND_POINT_COMPUTE, m_pipeline->handle());

        PushConstants push_constants;

        push_constants.roughness       = (float)mip / (float)(PREFILTER_MIP_LEVELS - 1);
        push_constants.size            = mip_height;
        push_constants.start_mip_level = start_level;
        push_constants.sample_count    = m_sample_count;

        vkCmdPushConstants(cmd_buf->handle(), m_pipeline_layout->handle(), VK_SHADER_STAGE_COMPUTE_BIT, 0, sizeof(push_constants), &push_constants);
        vkCmdBindDescriptorSets(cmd_buf->handle(), VK_PIPELINE_BIND_POINT_COMPUTE, m_pipeline_layout->handle(), 0, 1, &m_ds[mip]->handle(), 0, nullptr);

        vkCmdDispatch(cmd_buf->handle(), mip_width / PREFILTER_WORK_GROUP_SIZE, mip_height / PREFILTER_WORK_GROUP_SIZE, 6);
    }

    dw::vk::utilities::set_image_layout(
        cmd_buf->handle(),
        m_image->handle(),
        VK_IMAGE_LAYOUT_GENERAL,
        VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL,
        subresource_range);
#else
    m_program->use();

    if (m_program->set_uniform("s_EnvMap", 1))
        m_cubemap->bind(1);

    int32_t start_level = (m_size / PREFILTER_MAP_SIZE) - 1;
    m_program->set_uniform("u_StartMipLevel", start_level);

    for (int mip = 0; mip < PREFILTER_MIP_LEVELS; mip++)
    {
        m_sample_directions_ubos[mip]->bind_base(0);

        uint32_t mip_width  = PREFILTER_MAP_SIZE * std::pow(0.5, mip);
        uint32_t mip_height = PREFILTER_MAP_SIZE * std::pow(0.5, mip);

        float roughness = (float)mip / (float)(PREFILTER_MIP_LEVELS - 1);
        m_program->set_uniform("u_Roughness", roughness);
        m_program->set_uniform("u_SampleCount", m_sample_count);
        m_program->set_uniform("u_Width", float(mip_width));
        m_program->set_uniform("u_Height", float(mip_height));

        m_texture->bind_image(0, mip, 0, GL_WRITE_ONLY, GL_RGBA16F);

        glDispatchCompute(mip_width / PREFILTER_WORK_GROUP_SIZE, mip_height / PREFILTER_WORK_GROUP_SIZE, 6);
    }

    glMemoryBarrier(GL_SHADER_STORAGE_BARRIER_BIT);
#endif
}

// -----------------------------------------------------------------------------------------------------------------------------------

void CubemapPrefiler::set_sample_count(const uint32_t& count)
{
    if (m_sample_count != count)
    {
        m_sample_count = count;
        precompute_prefilter_constants();
    }
}

// -----------------------------------------------------------------------------------------------------------------------------------

uint32_t CubemapPrefiler::sample_count()
{
    return m_sample_count;
}

// -----------------------------------------------------------------------------------------------------------------------------------

void CubemapPrefiler::precompute_prefilter_constants()
{
    for (int mip = 0; mip < PREFILTER_MIP_LEVELS; mip++)
    {
        uint32_t mip_width  = PREFILTER_MAP_SIZE * std::pow(0.5, mip);
        uint32_t mip_height = PREFILTER_MAP_SIZE * std::pow(0.5, mip);

        float roughness = (float)mip / (float)(PREFILTER_MIP_LEVELS - 1);

        std::vector<glm::vec4> samples;

        samples.resize(MAX_PREFILTER_SAMPLES);

        for (int i = 0; i < m_sample_count; i++)
        {
            glm::vec2 Xi = hammersley(i, m_sample_count);
            float     a  = roughness * roughness;

            float phi       = 2.0f * M_PI * Xi.x;
            float cos_theta = sqrt((1.0f - Xi.y) / (1.0f + (a * a - 1.0f) * Xi.y));
            float sin_theta = sqrt(1.0f - cos_theta * cos_theta);

            // from spherical coordinates to cartesian coordinates - halfway vector
            glm::vec3 H;
            H.x = cos(phi) * sin_theta;
            H.y = sin(phi) * sin_theta;
            H.z = cos_theta;

            samples[i] = glm::vec4(H, 0.0f);
        }

#if defined(DWSF_VULKAN)
        void* mapped_ptr = m_sample_directions_ubos[mip]->mapped_ptr();
#else
        void* mapped_ptr = m_sample_directions_ubos[mip]->map(GL_WRITE_ONLY);
#endif
        memcpy(mapped_ptr, samples.data(), sizeof(glm::vec4) * m_sample_count);

#if !defined(DWSF_VULKAN)
        m_sample_directions_ubos[mip]->unmap();
#endif
    }
}

// -----------------------------------------------------------------------------------------------------------------------------------
} // namespace dw