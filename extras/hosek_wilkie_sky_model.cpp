#include "hosek_wilkie_sky_model.h"
#include <glm.hpp>
#include <algorithm>
#include <macros.h>
#include <logger.h>
#include <profiler.h>
#include <gtc/matrix_transform.hpp>

#if defined(DWSF_VULKAN)
#    include <vk_mem_alloc.h>
#endif

#define _USE_MATH_DEFINES
#include <math.h>

#include "hosek_data_rgb.inl"

#undef min
#undef max

namespace dw
{
#define SKY_CUBEMAP_SIZE 512

// -----------------------------------------------------------------------------------------------------------------------------------

#if defined(DWSF_VULKAN)
static const unsigned int kSKY_MODEL_VERT_SPIRV_size           = 1912;
static const unsigned int kSKY_MODEL_VERT_SPIRV_data[1912 / 4] = {
    0x07230203,
    0x00010500,
    0x0008000a,
    0x0000002b,
    0x00000000,
    0x00020011,
    0x00000001,
    0x0006000b,
    0x00000001,
    0x4c534c47,
    0x6474732e,
    0x3035342e,
    0x00000000,
    0x0003000e,
    0x00000000,
    0x00000001,
    0x000c000f,
    0x00000000,
    0x00000004,
    0x6e69616d,
    0x00000000,
    0x00000009,
    0x0000000b,
    0x00000013,
    0x00000019,
    0x00000026,
    0x00000027,
    0x0000002a,
    0x00030003,
    0x00000002,
    0x000001cc,
    0x00040005,
    0x00000004,
    0x6e69616d,
    0x00000000,
    0x00060005,
    0x00000009,
    0x495f5346,
    0x6f505f4e,
    0x69746973,
    0x00006e6f,
    0x00060005,
    0x0000000b,
    0x495f5356,
    0x6f505f4e,
    0x69746973,
    0x00006e6f,
    0x00060005,
    0x00000011,
    0x505f6c67,
    0x65567265,
    0x78657472,
    0x00000000,
    0x00060006,
    0x00000011,
    0x00000000,
    0x505f6c67,
    0x7469736f,
    0x006e6f69,
    0x00070006,
    0x00000011,
    0x00000001,
    0x505f6c67,
    0x746e696f,
    0x657a6953,
    0x00000000,
    0x00070006,
    0x00000011,
    0x00000002,
    0x435f6c67,
    0x4470696c,
    0x61747369,
    0x0065636e,
    0x00070006,
    0x00000011,
    0x00000003,
    0x435f6c67,
    0x446c6c75,
    0x61747369,
    0x0065636e,
    0x00030005,
    0x00000013,
    0x00000000,
    0x00060005,
    0x00000017,
    0x68737550,
    0x736e6f43,
    0x746e6174,
    0x00000073,
    0x00060006,
    0x00000017,
    0x00000000,
    0x77656976,
    0x6f72705f,
    0x0000006a,
    0x00060006,
    0x00000017,
    0x00000001,
    0x65726964,
    0x6f697463,
    0x0000006e,
    0x00060005,
    0x00000019,
    0x75505f75,
    0x6f436873,
    0x6174736e,
    0x0073746e,
    0x00060005,
    0x00000026,
    0x495f5356,
    0x6f4e5f4e,
    0x6c616d72,
    0x00000000,
    0x00060005,
    0x00000027,
    0x495f5356,
    0x65545f4e,
    0x6f6f4378,
    0x00006472,
    0x00050005,
    0x00000028,
    0x46726550,
    0x656d6172,
    0x004f4255,
    0x00040006,
    0x00000028,
    0x00000000,
    0x00000041,
    0x00040006,
    0x00000028,
    0x00000001,
    0x00000042,
    0x00040006,
    0x00000028,
    0x00000002,
    0x00000043,
    0x00040006,
    0x00000028,
    0x00000003,
    0x00000044,
    0x00040006,
    0x00000028,
    0x00000004,
    0x00000045,
    0x00040006,
    0x00000028,
    0x00000005,
    0x00000046,
    0x00040006,
    0x00000028,
    0x00000006,
    0x00000047,
    0x00040006,
    0x00000028,
    0x00000007,
    0x00000048,
    0x00040006,
    0x00000028,
    0x00000008,
    0x00000049,
    0x00040006,
    0x00000028,
    0x00000009,
    0x0000005a,
    0x00060005,
    0x0000002a,
    0x65505f75,
    0x61724672,
    0x4255656d,
    0x0000004f,
    0x00040047,
    0x00000009,
    0x0000001e,
    0x00000000,
    0x00040047,
    0x0000000b,
    0x0000001e,
    0x00000000,
    0x00050048,
    0x00000011,
    0x00000000,
    0x0000000b,
    0x00000000,
    0x00050048,
    0x00000011,
    0x00000001,
    0x0000000b,
    0x00000001,
    0x00050048,
    0x00000011,
    0x00000002,
    0x0000000b,
    0x00000003,
    0x00050048,
    0x00000011,
    0x00000003,
    0x0000000b,
    0x00000004,
    0x00030047,
    0x00000011,
    0x00000002,
    0x00040048,
    0x00000017,
    0x00000000,
    0x00000005,
    0x00050048,
    0x00000017,
    0x00000000,
    0x00000023,
    0x00000000,
    0x00050048,
    0x00000017,
    0x00000000,
    0x00000007,
    0x00000010,
    0x00050048,
    0x00000017,
    0x00000001,
    0x00000023,
    0x00000040,
    0x00030047,
    0x00000017,
    0x00000002,
    0x00040047,
    0x00000026,
    0x0000001e,
    0x00000001,
    0x00040047,
    0x00000027,
    0x0000001e,
    0x00000002,
    0x00050048,
    0x00000028,
    0x00000000,
    0x00000023,
    0x00000000,
    0x00050048,
    0x00000028,
    0x00000001,
    0x00000023,
    0x00000010,
    0x00050048,
    0x00000028,
    0x00000002,
    0x00000023,
    0x00000020,
    0x00050048,
    0x00000028,
    0x00000003,
    0x00000023,
    0x00000030,
    0x00050048,
    0x00000028,
    0x00000004,
    0x00000023,
    0x00000040,
    0x00050048,
    0x00000028,
    0x00000005,
    0x00000023,
    0x00000050,
    0x00050048,
    0x00000028,
    0x00000006,
    0x00000023,
    0x00000060,
    0x00050048,
    0x00000028,
    0x00000007,
    0x00000023,
    0x00000070,
    0x00050048,
    0x00000028,
    0x00000008,
    0x00000023,
    0x00000080,
    0x00050048,
    0x00000028,
    0x00000009,
    0x00000023,
    0x00000090,
    0x00030047,
    0x00000028,
    0x00000002,
    0x00040047,
    0x0000002a,
    0x00000022,
    0x00000000,
    0x00040047,
    0x0000002a,
    0x00000021,
    0x00000000,
    0x00020013,
    0x00000002,
    0x00030021,
    0x00000003,
    0x00000002,
    0x00030016,
    0x00000006,
    0x00000020,
    0x00040017,
    0x00000007,
    0x00000006,
    0x00000003,
    0x00040020,
    0x00000008,
    0x00000003,
    0x00000007,
    0x0004003b,
    0x00000008,
    0x00000009,
    0x00000003,
    0x00040020,
    0x0000000a,
    0x00000001,
    0x00000007,
    0x0004003b,
    0x0000000a,
    0x0000000b,
    0x00000001,
    0x00040017,
    0x0000000d,
    0x00000006,
    0x00000004,
    0x00040015,
    0x0000000e,
    0x00000020,
    0x00000000,
    0x0004002b,
    0x0000000e,
    0x0000000f,
    0x00000001,
    0x0004001c,
    0x00000010,
    0x00000006,
    0x0000000f,
    0x0006001e,
    0x00000011,
    0x0000000d,
    0x00000006,
    0x00000010,
    0x00000010,
    0x00040020,
    0x00000012,
    0x00000003,
    0x00000011,
    0x0004003b,
    0x00000012,
    0x00000013,
    0x00000003,
    0x00040015,
    0x00000014,
    0x00000020,
    0x00000001,
    0x0004002b,
    0x00000014,
    0x00000015,
    0x00000000,
    0x00040018,
    0x00000016,
    0x0000000d,
    0x00000004,
    0x0004001e,
    0x00000017,
    0x00000016,
    0x00000007,
    0x00040020,
    0x00000018,
    0x00000009,
    0x00000017,
    0x0004003b,
    0x00000018,
    0x00000019,
    0x00000009,
    0x00040020,
    0x0000001a,
    0x00000009,
    0x00000016,
    0x0004002b,
    0x00000006,
    0x0000001e,
    0x3f800000,
    0x00040020,
    0x00000024,
    0x00000003,
    0x0000000d,
    0x0004003b,
    0x0000000a,
    0x00000026,
    0x00000001,
    0x0004003b,
    0x0000000a,
    0x00000027,
    0x00000001,
    0x000c001e,
    0x00000028,
    0x0000000d,
    0x0000000d,
    0x0000000d,
    0x0000000d,
    0x0000000d,
    0x0000000d,
    0x0000000d,
    0x0000000d,
    0x0000000d,
    0x0000000d,
    0x00040020,
    0x00000029,
    0x00000002,
    0x00000028,
    0x0004003b,
    0x00000029,
    0x0000002a,
    0x00000002,
    0x00050036,
    0x00000002,
    0x00000004,
    0x00000000,
    0x00000003,
    0x000200f8,
    0x00000005,
    0x0004003d,
    0x00000007,
    0x0000000c,
    0x0000000b,
    0x0003003e,
    0x00000009,
    0x0000000c,
    0x00050041,
    0x0000001a,
    0x0000001b,
    0x00000019,
    0x00000015,
    0x0004003d,
    0x00000016,
    0x0000001c,
    0x0000001b,
    0x0004003d,
    0x00000007,
    0x0000001d,
    0x0000000b,
    0x00050051,
    0x00000006,
    0x0000001f,
    0x0000001d,
    0x00000000,
    0x00050051,
    0x00000006,
    0x00000020,
    0x0000001d,
    0x00000001,
    0x00050051,
    0x00000006,
    0x00000021,
    0x0000001d,
    0x00000002,
    0x00070050,
    0x0000000d,
    0x00000022,
    0x0000001f,
    0x00000020,
    0x00000021,
    0x0000001e,
    0x00050091,
    0x0000000d,
    0x00000023,
    0x0000001c,
    0x00000022,
    0x00050041,
    0x00000024,
    0x00000025,
    0x00000013,
    0x00000015,
    0x0003003e,
    0x00000025,
    0x00000023,
    0x000100fd,
    0x00010038,
};

// -----------------------------------------------------------------------------------------------------------------------------------

static const unsigned int kSKY_MODEL_FRAG_SPIRV_size           = 4500;
static const unsigned int kSKY_MODEL_FRAG_SPIRV_data[4500 / 4] = {
    0x07230203,
    0x00010500,
    0x0008000a,
    0x000000aa,
    0x00000000,
    0x00020011,
    0x00000001,
    0x0006000b,
    0x00000001,
    0x4c534c47,
    0x6474732e,
    0x3035342e,
    0x00000000,
    0x0003000e,
    0x00000000,
    0x00000001,
    0x0009000f,
    0x00000004,
    0x00000004,
    0x6e69616d,
    0x00000000,
    0x0000001e,
    0x00000096,
    0x0000009a,
    0x0000009e,
    0x00030010,
    0x00000004,
    0x00000007,
    0x00030003,
    0x00000002,
    0x000001cc,
    0x00040005,
    0x00000004,
    0x6e69616d,
    0x00000000,
    0x00080005,
    0x0000000d,
    0x65736f68,
    0x69775f6b,
    0x65696b6c,
    0x3b316628,
    0x663b3166,
    0x00003b31,
    0x00050005,
    0x0000000a,
    0x5f736f63,
    0x74656874,
    0x00000061,
    0x00040005,
    0x0000000b,
    0x6d6d6167,
    0x00000061,
    0x00050005,
    0x0000000c,
    0x5f736f63,
    0x6d6d6167,
    0x00000061,
    0x000a0005,
    0x00000013,
    0x65736f68,
    0x69775f6b,
    0x65696b6c,
    0x796b735f,
    0x6267725f,
    0x33667628,
    0x3366763b,
    0x0000003b,
    0x00030005,
    0x00000011,
    0x00000076,
    0x00040005,
    0x00000012,
    0x5f6e7573,
    0x00726964,
    0x00030005,
    0x00000015,
    0x00696863,
    0x00050005,
    0x0000001c,
    0x46726550,
    0x656d6172,
    0x004f4255,
    0x00040006,
    0x0000001c,
    0x00000000,
    0x00000041,
    0x00040006,
    0x0000001c,
    0x00000001,
    0x00000042,
    0x00040006,
    0x0000001c,
    0x00000002,
    0x00000043,
    0x00040006,
    0x0000001c,
    0x00000003,
    0x00000044,
    0x00040006,
    0x0000001c,
    0x00000004,
    0x00000045,
    0x00040006,
    0x0000001c,
    0x00000005,
    0x00000046,
    0x00040006,
    0x0000001c,
    0x00000006,
    0x00000047,
    0x00040006,
    0x0000001c,
    0x00000007,
    0x00000048,
    0x00040006,
    0x0000001c,
    0x00000008,
    0x00000049,
    0x00040006,
    0x0000001c,
    0x00000009,
    0x0000005a,
    0x00060005,
    0x0000001e,
    0x65505f75,
    0x61724672,
    0x4255656d,
    0x0000004f,
    0x00050005,
    0x00000075,
    0x5f736f63,
    0x74656874,
    0x00000061,
    0x00050005,
    0x0000007c,
    0x5f736f63,
    0x6d6d6167,
    0x00000061,
    0x00040005,
    0x00000081,
    0x6d6d6167,
    0x00005f61,
    0x00030005,
    0x00000084,
    0x00000052,
    0x00040005,
    0x00000089,
    0x61726170,
    0x0000006d,
    0x00040005,
    0x0000008b,
    0x61726170,
    0x0000006d,
    0x00040005,
    0x0000008d,
    0x61726170,
    0x0000006d,
    0x00050005,
    0x00000094,
    0x65726964,
    0x6f697463,
    0x0000006e,
    0x00060005,
    0x00000096,
    0x495f5346,
    0x6f505f4e,
    0x69746973,
    0x00006e6f,
    0x00060005,
    0x0000009a,
    0x4f5f5346,
    0x435f5455,
    0x726f6c6f,
    0x00000000,
    0x00060005,
    0x0000009c,
    0x68737550,
    0x736e6f43,
    0x746e6174,
    0x00000073,
    0x00060006,
    0x0000009c,
    0x00000000,
    0x77656976,
    0x6f72705f,
    0x0000006a,
    0x00060006,
    0x0000009c,
    0x00000001,
    0x65726964,
    0x6f697463,
    0x0000006e,
    0x00060005,
    0x0000009e,
    0x75505f75,
    0x6f436873,
    0x6174736e,
    0x0073746e,
    0x00040005,
    0x0000009f,
    0x61726170,
    0x0000006d,
    0x00040005,
    0x000000a1,
    0x61726170,
    0x0000006d,
    0x00050048,
    0x0000001c,
    0x00000000,
    0x00000023,
    0x00000000,
    0x00050048,
    0x0000001c,
    0x00000001,
    0x00000023,
    0x00000010,
    0x00050048,
    0x0000001c,
    0x00000002,
    0x00000023,
    0x00000020,
    0x00050048,
    0x0000001c,
    0x00000003,
    0x00000023,
    0x00000030,
    0x00050048,
    0x0000001c,
    0x00000004,
    0x00000023,
    0x00000040,
    0x00050048,
    0x0000001c,
    0x00000005,
    0x00000023,
    0x00000050,
    0x00050048,
    0x0000001c,
    0x00000006,
    0x00000023,
    0x00000060,
    0x00050048,
    0x0000001c,
    0x00000007,
    0x00000023,
    0x00000070,
    0x00050048,
    0x0000001c,
    0x00000008,
    0x00000023,
    0x00000080,
    0x00050048,
    0x0000001c,
    0x00000009,
    0x00000023,
    0x00000090,
    0x00030047,
    0x0000001c,
    0x00000002,
    0x00040047,
    0x0000001e,
    0x00000022,
    0x00000000,
    0x00040047,
    0x0000001e,
    0x00000021,
    0x00000000,
    0x00040047,
    0x00000096,
    0x0000001e,
    0x00000000,
    0x00040047,
    0x0000009a,
    0x0000001e,
    0x00000000,
    0x00040048,
    0x0000009c,
    0x00000000,
    0x00000005,
    0x00050048,
    0x0000009c,
    0x00000000,
    0x00000023,
    0x00000000,
    0x00050048,
    0x0000009c,
    0x00000000,
    0x00000007,
    0x00000010,
    0x00050048,
    0x0000009c,
    0x00000001,
    0x00000023,
    0x00000040,
    0x00030047,
    0x0000009c,
    0x00000002,
    0x00020013,
    0x00000002,
    0x00030021,
    0x00000003,
    0x00000002,
    0x00030016,
    0x00000006,
    0x00000020,
    0x00040020,
    0x00000007,
    0x00000007,
    0x00000006,
    0x00040017,
    0x00000008,
    0x00000006,
    0x00000003,
    0x00060021,
    0x00000009,
    0x00000008,
    0x00000007,
    0x00000007,
    0x00000007,
    0x00040020,
    0x0000000f,
    0x00000007,
    0x00000008,
    0x00050021,
    0x00000010,
    0x00000008,
    0x0000000f,
    0x0000000f,
    0x0004002b,
    0x00000006,
    0x00000016,
    0x3f800000,
    0x00040017,
    0x0000001b,
    0x00000006,
    0x00000004,
    0x000c001e,
    0x0000001c,
    0x0000001b,
    0x0000001b,
    0x0000001b,
    0x0000001b,
    0x0000001b,
    0x0000001b,
    0x0000001b,
    0x0000001b,
    0x0000001b,
    0x0000001b,
    0x00040020,
    0x0000001d,
    0x00000002,
    0x0000001c,
    0x0004003b,
    0x0000001d,
    0x0000001e,
    0x00000002,
    0x00040015,
    0x0000001f,
    0x00000020,
    0x00000001,
    0x0004002b,
    0x0000001f,
    0x00000020,
    0x00000007,
    0x00040020,
    0x00000021,
    0x00000002,
    0x0000001b,
    0x0004002b,
    0x00000006,
    0x0000002b,
    0x40000000,
    0x0004002b,
    0x00000006,
    0x00000033,
    0x3fc00000,
    0x0006002c,
    0x00000008,
    0x00000034,
    0x00000033,
    0x00000033,
    0x00000033,
    0x0004002b,
    0x0000001f,
    0x00000038,
    0x00000000,
    0x0004002b,
    0x0000001f,
    0x0000003c,
    0x00000001,
    0x0004002b,
    0x00000006,
    0x00000041,
    0x3c23d70a,
    0x0004002b,
    0x0000001f,
    0x00000049,
    0x00000002,
    0x0004002b,
    0x0000001f,
    0x0000004d,
    0x00000003,
    0x0004002b,
    0x0000001f,
    0x00000051,
    0x00000004,
    0x0004002b,
    0x0000001f,
    0x0000005a,
    0x00000005,
    0x0004002b,
    0x0000001f,
    0x00000063,
    0x00000006,
    0x0004002b,
    0x0000001f,
    0x0000006a,
    0x00000008,
    0x00040015,
    0x00000076,
    0x00000020,
    0x00000000,
    0x0004002b,
    0x00000076,
    0x00000077,
    0x00000001,
    0x0004002b,
    0x00000006,
    0x0000007a,
    0x00000000,
    0x0004002b,
    0x0000001f,
    0x00000085,
    0x00000009,
    0x00040020,
    0x00000095,
    0x00000001,
    0x00000008,
    0x0004003b,
    0x00000095,
    0x00000096,
    0x00000001,
    0x00040020,
    0x00000099,
    0x00000003,
    0x0000001b,
    0x0004003b,
    0x00000099,
    0x0000009a,
    0x00000003,
    0x00040018,
    0x0000009b,
    0x0000001b,
    0x00000004,
    0x0004001e,
    0x0000009c,
    0x0000009b,
    0x00000008,
    0x00040020,
    0x0000009d,
    0x00000009,
    0x0000009c,
    0x0004003b,
    0x0000009d,
    0x0000009e,
    0x00000009,
    0x00040020,
    0x000000a2,
    0x00000009,
    0x00000008,
    0x00050036,
    0x00000002,
    0x00000004,
    0x00000000,
    0x00000003,
    0x000200f8,
    0x00000005,
    0x0004003b,
    0x0000000f,
    0x00000094,
    0x00000007,
    0x0004003b,
    0x0000000f,
    0x0000009f,
    0x00000007,
    0x0004003b,
    0x0000000f,
    0x000000a1,
    0x00000007,
    0x0004003d,
    0x00000008,
    0x00000097,
    0x00000096,
    0x0006000c,
    0x00000008,
    0x00000098,
    0x00000001,
    0x00000045,
    0x00000097,
    0x0003003e,
    0x00000094,
    0x00000098,
    0x0004003d,
    0x00000008,
    0x000000a0,
    0x00000094,
    0x0003003e,
    0x0000009f,
    0x000000a0,
    0x00050041,
    0x000000a2,
    0x000000a3,
    0x0000009e,
    0x0000003c,
    0x0004003d,
    0x00000008,
    0x000000a4,
    0x000000a3,
    0x0003003e,
    0x000000a1,
    0x000000a4,
    0x00060039,
    0x00000008,
    0x000000a5,
    0x00000013,
    0x0000009f,
    0x000000a1,
    0x00050051,
    0x00000006,
    0x000000a6,
    0x000000a5,
    0x00000000,
    0x00050051,
    0x00000006,
    0x000000a7,
    0x000000a5,
    0x00000001,
    0x00050051,
    0x00000006,
    0x000000a8,
    0x000000a5,
    0x00000002,
    0x00070050,
    0x0000001b,
    0x000000a9,
    0x000000a6,
    0x000000a7,
    0x000000a8,
    0x00000016,
    0x0003003e,
    0x0000009a,
    0x000000a9,
    0x000100fd,
    0x00010038,
    0x00050036,
    0x00000008,
    0x0000000d,
    0x00000000,
    0x00000009,
    0x00030037,
    0x00000007,
    0x0000000a,
    0x00030037,
    0x00000007,
    0x0000000b,
    0x00030037,
    0x00000007,
    0x0000000c,
    0x000200f8,
    0x0000000e,
    0x0004003b,
    0x0000000f,
    0x00000015,
    0x00000007,
    0x0004003d,
    0x00000006,
    0x00000017,
    0x0000000c,
    0x0004003d,
    0x00000006,
    0x00000018,
    0x0000000c,
    0x00050085,
    0x00000006,
    0x00000019,
    0x00000017,
    0x00000018,
    0x00050081,
    0x00000006,
    0x0000001a,
    0x00000016,
    0x00000019,
    0x00050041,
    0x00000021,
    0x00000022,
    0x0000001e,
    0x00000020,
    0x0004003d,
    0x0000001b,
    0x00000023,
    0x00000022,
    0x0008004f,
    0x00000008,
    0x00000024,
    0x00000023,
    0x00000023,
    0x00000000,
    0x00000001,
    0x00000002,
    0x00050041,
    0x00000021,
    0x00000025,
    0x0000001e,
    0x00000020,
    0x0004003d,
    0x0000001b,
    0x00000026,
    0x00000025,
    0x0008004f,
    0x00000008,
    0x00000027,
    0x00000026,
    0x00000026,
    0x00000000,
    0x00000001,
    0x00000002,
    0x00050085,
    0x00000008,
    0x00000028,
    0x00000024,
    0x00000027,
    0x00060050,
    0x00000008,
    0x00000029,
    0x00000016,
    0x00000016,
    0x00000016,
    0x00050081,
    0x00000008,
    0x0000002a,
    0x00000029,
    0x00000028,
    0x0004003d,
    0x00000006,
    0x0000002c,
    0x0000000c,
    0x00050085,
    0x00000006,
    0x0000002d,
    0x0000002b,
    0x0000002c,
    0x00050041,
    0x00000021,
    0x0000002e,
    0x0000001e,
    0x00000020,
    0x0004003d,
    0x0000001b,
    0x0000002f,
    0x0000002e,
    0x0008004f,
    0x00000008,
    0x00000030,
    0x0000002f,
    0x0000002f,
    0x00000000,
    0x00000001,
    0x00000002,
    0x0005008e,
    0x00000008,
    0x00000031,
    0x00000030,
    0x0000002d,
    0x00050083,
    0x00000008,
    0x00000032,
    0x0000002a,
    0x00000031,
    0x0007000c,
    0x00000008,
    0x00000035,
    0x00000001,
    0x0000001a,
    0x00000032,
    0x00000034,
    0x00060050,
    0x00000008,
    0x00000036,
    0x0000001a,
    0x0000001a,
    0x0000001a,
    0x00050088,
    0x00000008,
    0x00000037,
    0x00000036,
    0x00000035,
    0x0003003e,
    0x00000015,
    0x00000037,
    0x00050041,
    0x00000021,
    0x00000039,
    0x0000001e,
    0x00000038,
    0x0004003d,
    0x0000001b,
    0x0000003a,
    0x00000039,
    0x0008004f,
    0x00000008,
    0x0000003b,
    0x0000003a,
    0x0000003a,
    0x00000000,
    0x00000001,
    0x00000002,
    0x00050041,
    0x00000021,
    0x0000003d,
    0x0000001e,
    0x0000003c,
    0x0004003d,
    0x0000001b,
    0x0000003e,
    0x0000003d,
    0x0008004f,
    0x00000008,
    0x0000003f,
    0x0000003e,
    0x0000003e,
    0x00000000,
    0x00000001,
    0x00000002,
    0x0004003d,
    0x00000006,
    0x00000040,
    0x0000000a,
    0x00050081,
    0x00000006,
    0x00000042,
    0x00000040,
    0x00000041,
    0x00060050,
    0x00000008,
    0x00000043,
    0x00000042,
    0x00000042,
    0x00000042,
    0x00050088,
    0x00000008,
    0x00000044,
    0x0000003f,
    0x00000043,
    0x0006000c,
    0x00000008,
    0x00000045,
    0x00000001,
    0x0000001b,
    0x00000044,
    0x00050085,
    0x00000008,
    0x00000046,
    0x0000003b,
    0x00000045,
    0x00060050,
    0x00000008,
    0x00000047,
    0x00000016,
    0x00000016,
    0x00000016,
    0x00050081,
    0x00000008,
    0x00000048,
    0x00000047,
    0x00000046,
    0x00050041,
    0x00000021,
    0x0000004a,
    0x0000001e,
    0x00000049,
    0x0004003d,
    0x0000001b,
    0x0000004b,
    0x0000004a,
    0x0008004f,
    0x00000008,
    0x0000004c,
    0x0000004b,
    0x0000004b,
    0x00000000,
    0x00000001,
    0x00000002,
    0x00050041,
    0x00000021,
    0x0000004e,
    0x0000001e,
    0x0000004d,
    0x0004003d,
    0x0000001b,
    0x0000004f,
    0x0000004e,
    0x0008004f,
    0x00000008,
    0x00000050,
    0x0000004f,
    0x0000004f,
    0x00000000,
    0x00000001,
    0x00000002,
    0x00050041,
    0x00000021,
    0x00000052,
    0x0000001e,
    0x00000051,
    0x0004003d,
    0x0000001b,
    0x00000053,
    0x00000052,
    0x0008004f,
    0x00000008,
    0x00000054,
    0x00000053,
    0x00000053,
    0x00000000,
    0x00000001,
    0x00000002,
    0x0004003d,
    0x00000006,
    0x00000055,
    0x0000000b,
    0x0005008e,
    0x00000008,
    0x00000056,
    0x00000054,
    0x00000055,
    0x0006000c,
    0x00000008,
    0x00000057,
    0x00000001,
    0x0000001b,
    0x00000056,
    0x00050085,
    0x00000008,
    0x00000058,
    0x00000050,
    0x00000057,
    0x00050081,
    0x00000008,
    0x00000059,
    0x0000004c,
    0x00000058,
    0x00050041,
    0x00000021,
    0x0000005b,
    0x0000001e,
    0x0000005a,
    0x0004003d,
    0x0000001b,
    0x0000005c,
    0x0000005b,
    0x0008004f,
    0x00000008,
    0x0000005d,
    0x0000005c,
    0x0000005c,
    0x00000000,
    0x00000001,
    0x00000002,
    0x0004003d,
    0x00000006,
    0x0000005e,
    0x0000000c,
    0x0004003d,
    0x00000006,
    0x0000005f,
    0x0000000c,
    0x00050085,
    0x00000006,
    0x00000060,
    0x0000005e,
    0x0000005f,
    0x0005008e,
    0x00000008,
    0x00000061,
    0x0000005d,
    0x00000060,
    0x00050081,
    0x00000008,
    0x00000062,
    0x00000059,
    0x00000061,
    0x00050041,
    0x00000021,
    0x00000064,
    0x0000001e,
    0x00000063,
    0x0004003d,
    0x0000001b,
    0x00000065,
    0x00000064,
    0x0008004f,
    0x00000008,
    0x00000066,
    0x00000065,
    0x00000065,
    0x00000000,
    0x00000001,
    0x00000002,
    0x0004003d,
    0x00000008,
    0x00000067,
    0x00000015,
    0x00050085,
    0x00000008,
    0x00000068,
    0x00000066,
    0x00000067,
    0x00050081,
    0x00000008,
    0x00000069,
    0x00000062,
    0x00000068,
    0x00050041,
    0x00000021,
    0x0000006b,
    0x0000001e,
    0x0000006a,
    0x0004003d,
    0x0000001b,
    0x0000006c,
    0x0000006b,
    0x0008004f,
    0x00000008,
    0x0000006d,
    0x0000006c,
    0x0000006c,
    0x00000000,
    0x00000001,
    0x00000002,
    0x0004003d,
    0x00000006,
    0x0000006e,
    0x0000000a,
    0x0006000c,
    0x00000006,
    0x0000006f,
    0x00000001,
    0x0000001f,
    0x0000006e,
    0x0005008e,
    0x00000008,
    0x00000070,
    0x0000006d,
    0x0000006f,
    0x00050081,
    0x00000008,
    0x00000071,
    0x00000069,
    0x00000070,
    0x00050085,
    0x00000008,
    0x00000072,
    0x00000048,
    0x00000071,
    0x000200fe,
    0x00000072,
    0x00010038,
    0x00050036,
    0x00000008,
    0x00000013,
    0x00000000,
    0x00000010,
    0x00030037,
    0x0000000f,
    0x00000011,
    0x00030037,
    0x0000000f,
    0x00000012,
    0x000200f8,
    0x00000014,
    0x0004003b,
    0x00000007,
    0x00000075,
    0x00000007,
    0x0004003b,
    0x00000007,
    0x0000007c,
    0x00000007,
    0x0004003b,
    0x00000007,
    0x00000081,
    0x00000007,
    0x0004003b,
    0x0000000f,
    0x00000084,
    0x00000007,
    0x0004003b,
    0x00000007,
    0x00000089,
    0x00000007,
    0x0004003b,
    0x00000007,
    0x0000008b,
    0x00000007,
    0x0004003b,
    0x00000007,
    0x0000008d,
    0x00000007,
    0x00050041,
    0x00000007,
    0x00000078,
    0x00000011,
    0x00000077,
    0x0004003d,
    0x00000006,
    0x00000079,
    0x00000078,
    0x0008000c,
    0x00000006,
    0x0000007b,
    0x00000001,
    0x0000002b,
    0x00000079,
    0x0000007a,
    0x00000016,
    0x0003003e,
    0x00000075,
    0x0000007b,
    0x0004003d,
    0x00000008,
    0x0000007d,
    0x00000011,
    0x0004003d,
    0x00000008,
    0x0000007e,
    0x00000012,
    0x00050094,
    0x00000006,
    0x0000007f,
    0x0000007d,
    0x0000007e,
    0x0008000c,
    0x00000006,
    0x00000080,
    0x00000001,
    0x0000002b,
    0x0000007f,
    0x0000007a,
    0x00000016,
    0x0003003e,
    0x0000007c,
    0x00000080,
    0x0004003d,
    0x00000006,
    0x00000082,
    0x0000007c,
    0x0006000c,
    0x00000006,
    0x00000083,
    0x00000001,
    0x00000011,
    0x00000082,
    0x0003003e,
    0x00000081,
    0x00000083,
    0x00050041,
    0x00000021,
    0x00000086,
    0x0000001e,
    0x00000085,
    0x0004003d,
    0x0000001b,
    0x00000087,
    0x00000086,
    0x0008004f,
    0x00000008,
    0x00000088,
    0x00000087,
    0x00000087,
    0x00000000,
    0x00000001,
    0x00000002,
    0x0004003d,
    0x00000006,
    0x0000008a,
    0x00000075,
    0x0003003e,
    0x00000089,
    0x0000008a,
    0x0004003d,
    0x00000006,
    0x0000008c,
    0x00000081,
    0x0003003e,
    0x0000008b,
    0x0000008c,
    0x0004003d,
    0x00000006,
    0x0000008e,
    0x0000007c,
    0x0003003e,
    0x0000008d,
    0x0000008e,
    0x00070039,
    0x00000008,
    0x0000008f,
    0x0000000d,
    0x00000089,
    0x0000008b,
    0x0000008d,
    0x00050085,
    0x00000008,
    0x00000090,
    0x00000088,
    0x0000008f,
    0x0003003e,
    0x00000084,
    0x00000090,
    0x0004003d,
    0x00000008,
    0x00000091,
    0x00000084,
    0x000200fe,
    0x00000091,
    0x00010038,
};

#else
static const char* g_update_vs_src = R"(
// ------------------------------------------------------------------
// INPUTS -----------------------------------------------------------
// ------------------------------------------------------------------

layout (location = 0) in vec3 VS_IN_Position;
layout (location = 1) in vec3 VS_IN_Normal;
layout (location = 2) in vec3 VS_IN_TexCoord;

// ------------------------------------------------------------------
// OUTPUTS ----------------------------------------------------------
// ------------------------------------------------------------------

out vec3 FS_IN_Position;

// ------------------------------------------------------------------
// UNIFORMS ---------------------------------------------------------
// ------------------------------------------------------------------

uniform mat4 u_ViewProj;

// ------------------------------------------------------------------
// MAIN -------------------------------------------------------------
// ------------------------------------------------------------------

void main()
{
    FS_IN_Position = VS_IN_Position;
    gl_Position = u_ViewProj * vec4(VS_IN_Position, 1.0f);
}

// ------------------------------------------------------------------
)";

static const char* g_update_fs_src = R"(
// ------------------------------------------------------------------
// INPUTS -----------------------------------------------------------
// ------------------------------------------------------------------

in vec3 FS_IN_Position;

// ------------------------------------------------------------------
// OUTPUTS ----------------------------------------------------------
// ------------------------------------------------------------------

out vec4 FS_OUT_Color;

// ------------------------------------------------------------------
// PUSH CONSTANTS ---------------------------------------------------
// ------------------------------------------------------------------

uniform vec3 u_Direction;
uniform vec3 A, B, C, D, E, F, G, H, I, Z;

// ------------------------------------------------------------------
// FUNCTIONS --------------------------------------------------------
// ------------------------------------------------------------------

vec3 hosek_wilkie(float cos_theta, float gamma, float cos_gamma)
{
	vec3 chi = (1 + cos_gamma * cos_gamma) / pow(1 + H.xyz * H.xyz - 2 * cos_gamma * H.xyz, vec3(1.5));
    return (1 + A.xyz * exp(B.xyz / (cos_theta + 0.01))) * (C.xyz + D.xyz * exp(E.xyz * gamma) + F.xyz * (cos_gamma * cos_gamma) + G.xyz * chi + I.xyz * sqrt(cos_theta));
}

// ------------------------------------------------------------------

vec3 hosek_wilkie_sky_rgb(vec3 v, vec3 sun_dir)
{
    float cos_theta = clamp(v.y, 0, 1);
	float cos_gamma = clamp(dot(v, sun_dir), 0, 1);
	float gamma_ = acos(cos_gamma);

	vec3 R = Z.xyz * hosek_wilkie(cos_theta, gamma_, cos_gamma);
    return R;
}

// ------------------------------------------------------------------
// MAIN -------------------------------------------------------------
// ------------------------------------------------------------------

void main()
{
    vec3 direction = normalize(FS_IN_Position);

    FS_OUT_Color = vec4(hosek_wilkie_sky_rgb(direction, u_Direction), 1.0f);
}

// ------------------------------------------------------------------
)";

static const char* g_render_vs_src = R"(
// ------------------------------------------------------------------
// INPUTS  ----------------------------------------------------------
// ------------------------------------------------------------------

layout(location = 0) in vec3 VS_IN_Position;

// ------------------------------------------------------------------
// OUTPUTS  ---------------------------------------------------------
// ------------------------------------------------------------------

out vec3 FS_IN_WorldPos;

// ------------------------------------------------------------------
// UNIFORMS  --------------------------------------------------------
// ------------------------------------------------------------------

uniform mat4 u_Projection;
uniform mat4 u_View;

// ------------------------------------------------------------------
// MAIN  ------------------------------------------------------------
// ------------------------------------------------------------------

void main()
{
    FS_IN_WorldPos = VS_IN_Position;

    mat4 rotView = mat4(mat3(u_View));
    vec4 clipPos = u_Projection * rotView * vec4(VS_IN_Position, 1.0);

    gl_Position = clipPos.xyww;
}

// ------------------------------------------------------------------
)";

static const char* g_render_fs_src = R"(
// ------------------------------------------------------------------
// INPUTS  ----------------------------------------------------------
// ------------------------------------------------------------------

out vec3 FS_OUT_Color;

// ------------------------------------------------------------------
// OUTPUTS  ---------------------------------------------------------
// ------------------------------------------------------------------

in vec3 FS_IN_WorldPos;

// ------------------------------------------------------------------
// UNIFORMS  --------------------------------------------------------
// ------------------------------------------------------------------

uniform samplerCube s_Cubemap;

// ------------------------------------------------------------------
// MAIN -------------------------------------------------------------
// ------------------------------------------------------------------

void main()
{
    vec3 env_color = texture(s_Cubemap, FS_IN_WorldPos).rgb;

    // HDR tonemap and gamma correct
    env_color = env_color / (env_color + vec3(1.0));
    env_color = pow(env_color, vec3(1.0 / 2.2));

    FS_OUT_Color = env_color;
}

// ------------------------------------------------------------------
)";

#endif

// -----------------------------------------------------------------------------------------------------------------------------------

struct HosekWilkieUBO
{
    glm::vec4 A;
    glm::vec4 B;
    glm::vec4 C;
    glm::vec4 D;
    glm::vec4 E;
    glm::vec4 F;
    glm::vec4 G;
    glm::vec4 H;
    glm::vec4 I;
    glm::vec4 Z;
};

struct HosekWilkiePushConstants
{
    glm::mat4 view_projection;
    glm::vec3 direction;
};

// -----------------------------------------------------------------------------------------------------------------------------------

double evaluate_spline(const double* spline, size_t stride, double value)
{
    return 1 * pow(1 - value, 5) * spline[0 * stride] + 5 * pow(1 - value, 4) * pow(value, 1) * spline[1 * stride] + 10 * pow(1 - value, 3) * pow(value, 2) * spline[2 * stride] + 10 * pow(1 - value, 2) * pow(value, 3) * spline[3 * stride] + 5 * pow(1 - value, 1) * pow(value, 4) * spline[4 * stride] + 1 * pow(value, 5) * spline[5 * stride];
}

// -----------------------------------------------------------------------------------------------------------------------------------

double evaluate(const double* dataset, size_t stride, float turbidity, float albedo, float sunTheta)
{
    // splines are functions of elevation^1/3
    double elevationK = pow(std::max<float>(0.f, 1.f - sunTheta / (M_PI / 2.f)), 1.f / 3.0f);

    // table has values for turbidity 1..10
    int   turbidity0 = glm::clamp(static_cast<int>(turbidity), 1, 10);
    int   turbidity1 = std::min(turbidity0 + 1, 10);
    float turbidityK = glm::clamp(turbidity - turbidity0, 0.f, 1.f);

    const double* datasetA0 = dataset;
    const double* datasetA1 = dataset + stride * 6 * 10;

    double a0t0 = evaluate_spline(datasetA0 + stride * 6 * (turbidity0 - 1), stride, elevationK);
    double a1t0 = evaluate_spline(datasetA1 + stride * 6 * (turbidity0 - 1), stride, elevationK);
    double a0t1 = evaluate_spline(datasetA0 + stride * 6 * (turbidity1 - 1), stride, elevationK);
    double a1t1 = evaluate_spline(datasetA1 + stride * 6 * (turbidity1 - 1), stride, elevationK);

    return a0t0 * (1 - albedo) * (1 - turbidityK) + a1t0 * albedo * (1 - turbidityK) + a0t1 * (1 - albedo) * turbidityK + a1t1 * albedo * turbidityK;
}

// -----------------------------------------------------------------------------------------------------------------------------------

glm::vec3 hosek_wilkie(float cos_theta, float gamma, float cos_gamma, glm::vec3 A, glm::vec3 B, glm::vec3 C, glm::vec3 D, glm::vec3 E, glm::vec3 F, glm::vec3 G, glm::vec3 H, glm::vec3 I)
{
    glm::vec3 chi = (1.f + cos_gamma * cos_gamma) / pow(1.f + H * H - 2.f * cos_gamma * H, glm::vec3(1.5f));
    return (1.f + A * exp(B / (cos_theta + 0.01f))) * (C + D * exp(E * gamma) + F * (cos_gamma * cos_gamma) + G * chi + I * (float)sqrt(std::max(0.f, cos_theta)));
}

// -----------------------------------------------------------------------------------------------------------------------------------

HosekWilkieSkyModel::HosekWilkieSkyModel(
#if defined(DWSF_VULKAN)
    vk::Backend::Ptr backend
#endif
)
{
    glm::mat4 capture_projection = glm::perspective(glm::radians(90.0f), 1.0f, 0.1f, 10.0f);
    glm::mat4 capture_views[]    = {
        glm::lookAt(glm::vec3(0.0f, 0.0f, 0.0f), glm::vec3(1.0f, 0.0f, 0.0f), glm::vec3(0.0f, -1.0f, 0.0f)),
        glm::lookAt(glm::vec3(0.0f, 0.0f, 0.0f), glm::vec3(-1.0f, 0.0f, 0.0f), glm::vec3(0.0f, -1.0f, 0.0f)),
        glm::lookAt(glm::vec3(0.0f, 0.0f, 0.0f), glm::vec3(0.0f, 1.0f, 0.0f), glm::vec3(0.0f, 0.0f, 1.0f)),
        glm::lookAt(glm::vec3(0.0f, 0.0f, 0.0f), glm::vec3(0.0f, -1.0f, 0.0f), glm::vec3(0.0f, 0.0f, -1.0f)),
        glm::lookAt(glm::vec3(0.0f, 0.0f, 0.0f), glm::vec3(0.0f, 0.0f, 1.0f), glm::vec3(0.0f, -1.0f, 0.0f)),
        glm::lookAt(glm::vec3(0.0f, 0.0f, 0.0f), glm::vec3(0.0f, 0.0f, -1.0f), glm::vec3(0.0f, -1.0f, 0.0f))
    };

    m_view_projection_mats.resize(6);

    for (int i = 0; i < 6; i++)
        m_view_projection_mats[i] = capture_projection * capture_views[i];

    float cube_vertices[] = {
        // back face
        -1.0f,
        -1.0f,
        -1.0f,
        0.0f,
        0.0f,
        -1.0f,
        0.0f,
        0.0f, // bottom-left
        1.0f,
        1.0f,
        -1.0f,
        0.0f,
        0.0f,
        -1.0f,
        1.0f,
        1.0f, // top-right
        1.0f,
        -1.0f,
        -1.0f,
        0.0f,
        0.0f,
        -1.0f,
        1.0f,
        0.0f, // bottom-right
        1.0f,
        1.0f,
        -1.0f,
        0.0f,
        0.0f,
        -1.0f,
        1.0f,
        1.0f, // top-right
        -1.0f,
        -1.0f,
        -1.0f,
        0.0f,
        0.0f,
        -1.0f,
        0.0f,
        0.0f, // bottom-left
        -1.0f,
        1.0f,
        -1.0f,
        0.0f,
        0.0f,
        -1.0f,
        0.0f,
        1.0f, // top-left
        // front face
        -1.0f,
        -1.0f,
        1.0f,
        0.0f,
        0.0f,
        1.0f,
        0.0f,
        0.0f, // bottom-left
        1.0f,
        -1.0f,
        1.0f,
        0.0f,
        0.0f,
        1.0f,
        1.0f,
        0.0f, // bottom-right
        1.0f,
        1.0f,
        1.0f,
        0.0f,
        0.0f,
        1.0f,
        1.0f,
        1.0f, // top-right
        1.0f,
        1.0f,
        1.0f,
        0.0f,
        0.0f,
        1.0f,
        1.0f,
        1.0f, // top-right
        -1.0f,
        1.0f,
        1.0f,
        0.0f,
        0.0f,
        1.0f,
        0.0f,
        1.0f, // top-left
        -1.0f,
        -1.0f,
        1.0f,
        0.0f,
        0.0f,
        1.0f,
        0.0f,
        0.0f, // bottom-left
        // left face
        -1.0f,
        1.0f,
        1.0f,
        -1.0f,
        0.0f,
        0.0f,
        1.0f,
        0.0f, // top-right
        -1.0f,
        1.0f,
        -1.0f,
        -1.0f,
        0.0f,
        0.0f,
        1.0f,
        1.0f, // top-left
        -1.0f,
        -1.0f,
        -1.0f,
        -1.0f,
        0.0f,
        0.0f,
        0.0f,
        1.0f, // bottom-left
        -1.0f,
        -1.0f,
        -1.0f,
        -1.0f,
        0.0f,
        0.0f,
        0.0f,
        1.0f, // bottom-left
        -1.0f,
        -1.0f,
        1.0f,
        -1.0f,
        0.0f,
        0.0f,
        0.0f,
        0.0f, // bottom-right
        -1.0f,
        1.0f,
        1.0f,
        -1.0f,
        0.0f,
        0.0f,
        1.0f,
        0.0f, // top-right
        // right face
        1.0f,
        1.0f,
        1.0f,
        1.0f,
        0.0f,
        0.0f,
        1.0f,
        0.0f, // top-left
        1.0f,
        -1.0f,
        -1.0f,
        1.0f,
        0.0f,
        0.0f,
        0.0f,
        1.0f, // bottom-right
        1.0f,
        1.0f,
        -1.0f,
        1.0f,
        0.0f,
        0.0f,
        1.0f,
        1.0f, // top-right
        1.0f,
        -1.0f,
        -1.0f,
        1.0f,
        0.0f,
        0.0f,
        0.0f,
        1.0f, // bottom-right
        1.0f,
        1.0f,
        1.0f,
        1.0f,
        0.0f,
        0.0f,
        1.0f,
        0.0f, // top-left
        1.0f,
        -1.0f,
        1.0f,
        1.0f,
        0.0f,
        0.0f,
        0.0f,
        0.0f, // bottom-left
        // bottom face
        -1.0f,
        -1.0f,
        -1.0f,
        0.0f,
        -1.0f,
        0.0f,
        0.0f,
        1.0f, // top-right
        1.0f,
        -1.0f,
        -1.0f,
        0.0f,
        -1.0f,
        0.0f,
        1.0f,
        1.0f, // top-left
        1.0f,
        -1.0f,
        1.0f,
        0.0f,
        -1.0f,
        0.0f,
        1.0f,
        0.0f, // bottom-left
        1.0f,
        -1.0f,
        1.0f,
        0.0f,
        -1.0f,
        0.0f,
        1.0f,
        0.0f, // bottom-left
        -1.0f,
        -1.0f,
        1.0f,
        0.0f,
        -1.0f,
        0.0f,
        0.0f,
        0.0f, // bottom-right
        -1.0f,
        -1.0f,
        -1.0f,
        0.0f,
        -1.0f,
        0.0f,
        0.0f,
        1.0f, // top-right
        // top face
        -1.0f,
        1.0f,
        -1.0f,
        0.0f,
        1.0f,
        0.0f,
        0.0f,
        1.0f, // top-left
        1.0f,
        1.0f,
        1.0f,
        0.0f,
        1.0f,
        0.0f,
        1.0f,
        0.0f, // bottom-right
        1.0f,
        1.0f,
        -1.0f,
        0.0f,
        1.0f,
        0.0f,
        1.0f,
        1.0f, // top-right
        1.0f,
        1.0f,
        1.0f,
        0.0f,
        1.0f,
        0.0f,
        1.0f,
        0.0f, // bottom-right
        -1.0f,
        1.0f,
        -1.0f,
        0.0f,
        1.0f,
        0.0f,
        0.0f,
        1.0f, // top-left
        -1.0f,
        1.0f,
        1.0f,
        0.0f,
        1.0f,
        0.0f,
        0.0f,
        0.0f // bottom-left
    };

#if defined(DWSF_VULKAN)
    m_cubemap_image = vk::Image::create(backend, VK_IMAGE_TYPE_2D, SKY_CUBEMAP_SIZE, SKY_CUBEMAP_SIZE, 1, 5, 6, VK_FORMAT_R32G32B32A32_SFLOAT, VMA_MEMORY_USAGE_GPU_ONLY, VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_TRANSFER_SRC_BIT, VK_SAMPLE_COUNT_1_BIT, VK_IMAGE_LAYOUT_UNDEFINED, 0, nullptr, VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT);
    m_cubemap_image->set_name("Procedural Sky");

    m_cubemap_image_view = vk::ImageView::create(backend, m_cubemap_image, VK_IMAGE_VIEW_TYPE_CUBE, VK_IMAGE_ASPECT_COLOR_BIT, 0, 5, 0, 6);
    m_cubemap_image_view->set_name("Procedural Sky Image View");

    m_face_image_views.resize(6);
    m_face_framebuffers.resize(6);

    VkAttachmentDescription attachment;
    DW_ZERO_MEMORY(attachment);

    // Color attachment
    attachment.format         = VK_FORMAT_R32G32B32A32_SFLOAT;
    attachment.samples        = VK_SAMPLE_COUNT_1_BIT;
    attachment.loadOp         = VK_ATTACHMENT_LOAD_OP_CLEAR;
    attachment.storeOp        = VK_ATTACHMENT_STORE_OP_STORE;
    attachment.stencilLoadOp  = VK_ATTACHMENT_LOAD_OP_DONT_CARE;
    attachment.stencilStoreOp = VK_ATTACHMENT_STORE_OP_DONT_CARE;
    attachment.initialLayout  = VK_IMAGE_LAYOUT_UNDEFINED;
    attachment.finalLayout    = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;

    VkAttachmentReference color_reference;
    color_reference.attachment = 0;
    color_reference.layout     = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL;

    std::vector<VkSubpassDescription> subpass_description(1);

    subpass_description[0].pipelineBindPoint       = VK_PIPELINE_BIND_POINT_GRAPHICS;
    subpass_description[0].colorAttachmentCount    = 1;
    subpass_description[0].pColorAttachments       = &color_reference;
    subpass_description[0].pDepthStencilAttachment = nullptr;
    subpass_description[0].inputAttachmentCount    = 0;
    subpass_description[0].pInputAttachments       = nullptr;
    subpass_description[0].preserveAttachmentCount = 0;
    subpass_description[0].pPreserveAttachments    = nullptr;
    subpass_description[0].pResolveAttachments     = nullptr;

    // Subpass dependencies for layout transitions
    std::vector<VkSubpassDependency> dependencies(2);

    dependencies[0].srcSubpass      = VK_SUBPASS_EXTERNAL;
    dependencies[0].dstSubpass      = 0;
    dependencies[0].srcStageMask    = VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT;
    dependencies[0].dstStageMask    = VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT;
    dependencies[0].srcAccessMask   = VK_ACCESS_MEMORY_READ_BIT;
    dependencies[0].dstAccessMask   = VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT;
    dependencies[0].dependencyFlags = VK_DEPENDENCY_BY_REGION_BIT;

    dependencies[1].srcSubpass      = 0;
    dependencies[1].dstSubpass      = VK_SUBPASS_EXTERNAL;
    dependencies[1].srcStageMask    = VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT;
    dependencies[1].dstStageMask    = VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT;
    dependencies[1].srcAccessMask   = VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT;
    dependencies[1].dstAccessMask   = VK_ACCESS_MEMORY_READ_BIT;
    dependencies[1].dependencyFlags = VK_DEPENDENCY_BY_REGION_BIT;

    m_cubemap_renderpass = vk::RenderPass::create(backend, { attachment }, subpass_description, dependencies);

    for (int i = 0; i < 6; i++)
    {
        m_face_image_views[i] = vk::ImageView::create(backend, m_cubemap_image, VK_IMAGE_VIEW_TYPE_2D, VK_IMAGE_ASPECT_COLOR_BIT, 0, 1, i, 1);
        m_face_image_views[i]->set_name("Procedural Sky Face " + std::to_string(i) + " Image View");

        m_face_framebuffers[i] = vk::Framebuffer::create(backend, m_cubemap_renderpass, { m_face_image_views[i] }, SKY_CUBEMAP_SIZE, SKY_CUBEMAP_SIZE, 1);
        m_face_framebuffers[i]->set_name("Procedural Sky Face " + std::to_string(i) + " Framebuffer");
    }

    m_cube_vbo = vk::Buffer::create(backend, VK_BUFFER_USAGE_VERTEX_BUFFER_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT, sizeof(cube_vertices), VMA_MEMORY_USAGE_GPU_ONLY, 0, cube_vertices);

    vk::DescriptorSetLayout::Desc buffer_array_ds_layout_desc;

    buffer_array_ds_layout_desc.add_binding(0, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, 1, VK_SHADER_STAGE_VERTEX_BIT | VK_SHADER_STAGE_FRAGMENT_BIT);

    m_ds_layout = vk::DescriptorSetLayout::create(backend, buffer_array_ds_layout_desc);
    m_ubo       = vk::Buffer::create(backend, VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT, sizeof(HosekWilkieUBO), VMA_MEMORY_USAGE_CPU_TO_GPU, VMA_ALLOCATION_CREATE_MAPPED_BIT);
    m_ds        = backend->allocate_descriptor_set(m_ds_layout);

    VkDescriptorBufferInfo ubo_info;

    ubo_info.buffer = m_ubo->handle();
    ubo_info.offset = 0;
    ubo_info.range  = VK_WHOLE_SIZE;

    VkWriteDescriptorSet write_data;
    DW_ZERO_MEMORY(write_data);

    write_data.sType           = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
    write_data.descriptorCount = 1;
    write_data.pBufferInfo     = &ubo_info;
    write_data.descriptorType  = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;
    write_data.dstBinding      = 0;
    write_data.dstSet          = m_ds->handle();

    vkUpdateDescriptorSets(backend->device(), 1, &write_data, 0, nullptr);

    // ---------------------------------------------------------------------------
    // Create shader modules
    // ---------------------------------------------------------------------------

    std::vector<char> vert_spirv;

    vert_spirv.resize(kSKY_MODEL_VERT_SPIRV_size);
    memcpy(&vert_spirv[0], &kSKY_MODEL_VERT_SPIRV_data[0], kSKY_MODEL_VERT_SPIRV_size);

    std::vector<char> frag_spirv;

    frag_spirv.resize(kSKY_MODEL_FRAG_SPIRV_size);
    memcpy(&frag_spirv[0], &kSKY_MODEL_FRAG_SPIRV_data[0], kSKY_MODEL_FRAG_SPIRV_size);

    vk::ShaderModule::Ptr vs = vk::ShaderModule::create(backend, vert_spirv);
    vk::ShaderModule::Ptr fs = vk::ShaderModule::create(backend, frag_spirv);

    vk::GraphicsPipeline::Desc pso_desc;

    pso_desc.add_shader_stage(VK_SHADER_STAGE_VERTEX_BIT, vs, "main")
        .add_shader_stage(VK_SHADER_STAGE_FRAGMENT_BIT, fs, "main");

    // ---------------------------------------------------------------------------
    // Create vertex input state
    // ---------------------------------------------------------------------------

    vk::VertexInputStateDesc vertex_input_state_desc;

    struct SkyboxVertex
    {
        glm::vec3 position;
        glm::vec3 normal;
        glm::vec2 texcoord;
    };

    vertex_input_state_desc.add_binding_desc(0, sizeof(SkyboxVertex), VK_VERTEX_INPUT_RATE_VERTEX);

    vertex_input_state_desc.add_attribute_desc(0, 0, VK_FORMAT_R32G32B32_SFLOAT, 0);
    vertex_input_state_desc.add_attribute_desc(1, 0, VK_FORMAT_R32G32B32_SFLOAT, offsetof(SkyboxVertex, normal));
    vertex_input_state_desc.add_attribute_desc(2, 0, VK_FORMAT_R32G32_SFLOAT, offsetof(SkyboxVertex, texcoord));

    pso_desc.set_vertex_input_state(vertex_input_state_desc);

    // ---------------------------------------------------------------------------
    // Create pipeline input assembly state
    // ---------------------------------------------------------------------------

    vk::InputAssemblyStateDesc input_assembly_state_desc;

    input_assembly_state_desc.set_primitive_restart_enable(false);

    // ---------------------------------------------------------------------------
    // Create viewport state
    // ---------------------------------------------------------------------------

    vk::ViewportStateDesc vp_desc;

    vp_desc.add_viewport(0.0f, 0.0f, 1024, 1024, 0.0f, 1.0f)
        .add_scissor(0, 0, 1024, 1024);

    pso_desc.set_viewport_state(vp_desc);

    // ---------------------------------------------------------------------------
    // Create rasterization state
    // ---------------------------------------------------------------------------

    vk::RasterizationStateDesc rs_state;

    rs_state.set_depth_clamp(VK_FALSE)
        .set_rasterizer_discard_enable(VK_FALSE)
        .set_polygon_mode(VK_POLYGON_MODE_FILL)
        .set_line_width(1.0f)
        .set_cull_mode(VK_CULL_MODE_NONE)
        .set_front_face(VK_FRONT_FACE_COUNTER_CLOCKWISE)
        .set_depth_bias(VK_FALSE);

    pso_desc.set_rasterization_state(rs_state);

    // ---------------------------------------------------------------------------
    // Create multisample state
    // ---------------------------------------------------------------------------

    vk::MultisampleStateDesc ms_state;

    ms_state.set_sample_shading_enable(VK_FALSE)
        .set_rasterization_samples(VK_SAMPLE_COUNT_1_BIT);

    pso_desc.set_multisample_state(ms_state);

    // ---------------------------------------------------------------------------
    // Create depth stencil state
    // ---------------------------------------------------------------------------

    vk::DepthStencilStateDesc ds_state;

    ds_state.set_depth_test_enable(VK_FALSE)
        .set_depth_write_enable(VK_FALSE)
        .set_depth_compare_op(VK_COMPARE_OP_LESS)
        .set_depth_bounds_test_enable(VK_FALSE)
        .set_stencil_test_enable(VK_FALSE);

    pso_desc.set_depth_stencil_state(ds_state);

    // ---------------------------------------------------------------------------
    // Create color blend state
    // ---------------------------------------------------------------------------

    vk::ColorBlendAttachmentStateDesc blend_att_desc;

    blend_att_desc.set_color_write_mask(VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT)
        .set_src_color_blend_factor(VK_BLEND_FACTOR_SRC_ALPHA)
        .set_dst_color_blend_Factor(VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA)
        .set_src_alpha_blend_factor(VK_BLEND_FACTOR_ONE)
        .set_dst_alpha_blend_factor(VK_BLEND_FACTOR_ZERO)
        .set_color_blend_op(VK_BLEND_OP_ADD)
        .set_blend_enable(VK_FALSE);

    vk::ColorBlendStateDesc blend_state;

    blend_state.set_logic_op_enable(VK_FALSE)
        .set_logic_op(VK_LOGIC_OP_COPY)
        .set_blend_constants(0.0f, 0.0f, 0.0f, 0.0f)
        .add_attachment(blend_att_desc);

    pso_desc.set_color_blend_state(blend_state);

    // ---------------------------------------------------------------------------
    // Create pipeline layout
    // ---------------------------------------------------------------------------

    vk::PipelineLayout::Desc pl_desc;

    pl_desc.add_descriptor_set_layout(m_ds_layout);
    pl_desc.add_push_constant_range(VK_SHADER_STAGE_VERTEX_BIT | VK_SHADER_STAGE_FRAGMENT_BIT, 0, sizeof(HosekWilkiePushConstants));

    m_cubemap_pipeline_layout = vk::PipelineLayout::create(backend, pl_desc);

    pso_desc.set_pipeline_layout(m_cubemap_pipeline_layout);

    // ---------------------------------------------------------------------------
    // Create dynamic state
    // ---------------------------------------------------------------------------

    pso_desc.add_dynamic_state(VK_DYNAMIC_STATE_VIEWPORT)
        .add_dynamic_state(VK_DYNAMIC_STATE_SCISSOR);

    pso_desc.set_render_pass(m_cubemap_renderpass);

    // ---------------------------------------------------------------------------
    // Create line list pipeline
    // ---------------------------------------------------------------------------

    input_assembly_state_desc.set_topology(VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST);

    pso_desc.set_input_assembly_state(input_assembly_state_desc);

    m_cubemap_pipeline = vk::GraphicsPipeline::create(backend, pso_desc);

#else
    m_cubemap = gl::TextureCube::create(SKY_CUBEMAP_SIZE, SKY_CUBEMAP_SIZE, 1, 1, GL_RGB16F, GL_RGB, GL_HALF_FLOAT);
    m_depth   = gl::Texture2D::create(SKY_CUBEMAP_SIZE, SKY_CUBEMAP_SIZE, 1, 1, 1, GL_DEPTH_COMPONENT32F, GL_DEPTH_COMPONENT, GL_FLOAT);

    for (int i = 0; i < 6; i++)
    {
        gl::TextureCubeView::Ptr view = gl::TextureCubeView::create(m_cubemap, GL_TEXTURE_2D, 0, 1, i, 1);
        m_texture_views.push_back(view);
        m_fbos.push_back(gl::Framebuffer::create({ view }, m_depth));
    }

    m_update_vs = gl::Shader::create(GL_VERTEX_SHADER, g_update_vs_src);
    m_update_fs = gl::Shader::create(GL_FRAGMENT_SHADER, g_update_fs_src);

    if (!m_update_vs->compiled() || !m_update_fs->compiled())
        DW_LOG_FATAL("Failed to create Shaders");

    // Create general shader program
    m_update_program = gl::Program::create({ m_update_vs, m_update_fs });

    m_render_vs = gl::Shader::create(GL_VERTEX_SHADER, g_render_vs_src);
    m_render_fs = gl::Shader::create(GL_FRAGMENT_SHADER, g_render_fs_src);

    if (!m_render_vs->compiled() || !m_render_fs->compiled())
        DW_LOG_FATAL("Failed to create Shaders");

    // Create general shader program
    m_render_program = gl::Program::create({ m_render_vs, m_render_fs });

    if (!m_render_program)
        DW_LOG_FATAL("Failed to create Shader Program");

    m_vbo = gl::Buffer::create(GL_ARRAY_BUFFER, 0, sizeof(cube_vertices), cube_vertices);

    if (!m_vbo)
        DW_LOG_ERROR("Failed to create Vertex Buffer");

    // Declare vertex attributes.
    gl::VertexAttrib attribs[] = {
        { 3, GL_FLOAT, false, 0 },
        { 3, GL_FLOAT, false, (3 * sizeof(float)) },
        { 2, GL_FLOAT, false, (6 * sizeof(float)) }
    };

    // Create vertex array.
    m_vao = gl::VertexArray::create(m_vbo, nullptr, (8 * sizeof(float)), 3, attribs);

#endif
}

// -----------------------------------------------------------------------------------------------------------------------------------

HosekWilkieSkyModel::~HosekWilkieSkyModel()
{
#if defined(DWSF_VULKAN)
    m_ds.reset();
    m_ds_layout.reset();
    m_ubo.reset();
    m_cubemap_pipeline.reset();
    m_cubemap_pipeline_layout.reset();
    m_face_framebuffers.clear();
    m_face_image_views.clear();
    m_cubemap_renderpass.reset();
    m_cubemap_image_view.reset();
    m_cubemap_image.reset();

#else
    m_update_program.reset();
    m_update_vs.reset();
    m_update_fs.reset();
    m_fbos.clear();
    m_cubemap.reset();
    m_depth.reset();
    m_vao.reset();
    m_vbo.reset();
#endif
}

// -----------------------------------------------------------------------------------------------------------------------------------

void HosekWilkieSkyModel::update(
#if defined(DWSF_VULKAN)
    vk::CommandBuffer::Ptr cmd_buf,
#endif
    glm::vec3 direction)
{
#if defined(DWSF_VULKAN)
    DW_SCOPED_SAMPLE("Procedural Sky", cmd_buf);
#else
    DW_SCOPED_SAMPLE("Procedural Sky");
#endif

    const float sunTheta = std::acos(glm::clamp(direction.y, 0.f, 1.f));

    for (int i = 0; i < 3; ++i)
    {
        A[i] = evaluate(datasetsRGB[i] + 0, 9, m_turbidity, m_albedo, sunTheta);
        B[i] = evaluate(datasetsRGB[i] + 1, 9, m_turbidity, m_albedo, sunTheta);
        C[i] = evaluate(datasetsRGB[i] + 2, 9, m_turbidity, m_albedo, sunTheta);
        D[i] = evaluate(datasetsRGB[i] + 3, 9, m_turbidity, m_albedo, sunTheta);
        E[i] = evaluate(datasetsRGB[i] + 4, 9, m_turbidity, m_albedo, sunTheta);
        F[i] = evaluate(datasetsRGB[i] + 5, 9, m_turbidity, m_albedo, sunTheta);
        G[i] = evaluate(datasetsRGB[i] + 6, 9, m_turbidity, m_albedo, sunTheta);

        // Swapped in the dataset
        H[i] = evaluate(datasetsRGB[i] + 8, 9, m_turbidity, m_albedo, sunTheta);
        I[i] = evaluate(datasetsRGB[i] + 7, 9, m_turbidity, m_albedo, sunTheta);

        Z[i] = evaluate(datasetsRGBRad[i], 1, m_turbidity, m_albedo, sunTheta);
    }

    if (m_normalized_sun_y)
    {
        glm::vec3 S = hosek_wilkie(std::cos(sunTheta), 0, 1.f, A, B, C, D, E, F, G, H, I) * Z;
        Z /= glm::dot(S, glm::vec3(0.2126, 0.7152, 0.0722));
        Z *= m_normalized_sun_y;
    }

    HosekWilkieUBO ubo;

    ubo.A = glm::vec4(A, 0.0f);
    ubo.B = glm::vec4(B, 0.0f);
    ubo.C = glm::vec4(C, 0.0f);
    ubo.D = glm::vec4(D, 0.0f);
    ubo.E = glm::vec4(E, 0.0f);
    ubo.F = glm::vec4(F, 0.0f);
    ubo.G = glm::vec4(G, 0.0f);
    ubo.H = glm::vec4(H, 0.0f);
    ubo.I = glm::vec4(I, 0.0f);
    ubo.Z = glm::vec4(Z, 0.0f);

#if defined(DWSF_VULKAN)
    memcpy(m_ubo->mapped_ptr(), &ubo, sizeof(HosekWilkieUBO));

    vkCmdBindPipeline(cmd_buf->handle(), VK_PIPELINE_BIND_POINT_GRAPHICS, m_cubemap_pipeline->handle());

    const VkDescriptorSet sets[] = { m_ds->handle() };

    vkCmdBindDescriptorSets(cmd_buf->handle(), VK_PIPELINE_BIND_POINT_GRAPHICS, m_cubemap_pipeline_layout->handle(), 0, 1, sets, 0, nullptr);

    for (int i = 0; i < 6; i++)
    {
        VkClearValue clear_value;

        clear_value.color.float32[0] = 0.0f;
        clear_value.color.float32[1] = 0.0f;
        clear_value.color.float32[2] = 0.0f;
        clear_value.color.float32[3] = 1.0f;

        VkRenderPassBeginInfo info    = {};
        info.sType                    = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO;
        info.renderPass               = m_cubemap_renderpass->handle();
        info.framebuffer              = m_face_framebuffers[i]->handle();
        info.renderArea.extent.width  = SKY_CUBEMAP_SIZE;
        info.renderArea.extent.height = SKY_CUBEMAP_SIZE;
        info.clearValueCount          = 1;
        info.pClearValues             = &clear_value;

        vkCmdBeginRenderPass(cmd_buf->handle(), &info, VK_SUBPASS_CONTENTS_INLINE);

        VkViewport vp;

        vp.x        = 0.0f;
        vp.y        = 0.0f;
        vp.width    = (float)SKY_CUBEMAP_SIZE;
        vp.height   = (float)SKY_CUBEMAP_SIZE;
        vp.minDepth = 0.0f;
        vp.maxDepth = 1.0f;

        vkCmdSetViewport(cmd_buf->handle(), 0, 1, &vp);

        VkRect2D scissor_rect;

        scissor_rect.extent.width  = SKY_CUBEMAP_SIZE;
        scissor_rect.extent.height = SKY_CUBEMAP_SIZE;
        scissor_rect.offset.x      = 0;
        scissor_rect.offset.y      = 0;

        vkCmdSetScissor(cmd_buf->handle(), 0, 1, &scissor_rect);

        HosekWilkiePushConstants push_constants;

        push_constants.view_projection = m_view_projection_mats[i];
        push_constants.direction       = direction;

        vkCmdPushConstants(cmd_buf->handle(), m_cubemap_pipeline_layout->handle(), VK_SHADER_STAGE_VERTEX_BIT | VK_SHADER_STAGE_FRAGMENT_BIT, 0, sizeof(HosekWilkiePushConstants), &push_constants);

        const VkBuffer     buffer = m_cube_vbo->handle();
        const VkDeviceSize size   = 0;
        vkCmdBindVertexBuffers(cmd_buf->handle(), 0, 1, &buffer, &size);

        vkCmdDraw(cmd_buf->handle(), 36, 1, 0, 0);

        vkCmdEndRenderPass(cmd_buf->handle());
    }
#else
    m_update_program->use();

    m_update_program->set_uniform("u_Direction", direction);
    m_update_program->set_uniform("A", A);
    m_update_program->set_uniform("B", B);
    m_update_program->set_uniform("C", C);
    m_update_program->set_uniform("D", D);
    m_update_program->set_uniform("E", E);
    m_update_program->set_uniform("F", F);
    m_update_program->set_uniform("G", G);
    m_update_program->set_uniform("H", H);
    m_update_program->set_uniform("I", I);
    m_update_program->set_uniform("Z", Z);

    glDisable(GL_BLEND);
    glDisable(GL_CULL_FACE);

    for (int i = 0; i < 6; i++)
    {
        m_update_program->set_uniform("u_ViewProj", m_view_projection_mats[i]);

        m_fbos[i]->bind();
        glViewport(0, 0, SKY_CUBEMAP_SIZE, SKY_CUBEMAP_SIZE);

        glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
        glClearDepth(1.0);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

        m_vao->bind();

        glDrawArrays(GL_TRIANGLES, 0, 36);
    }
#endif
}

// -----------------------------------------------------------------------------------------------------------------------------------

void HosekWilkieSkyModel::render(
#if defined(DWSF_VULKAN)
    vk::CommandBuffer::Ptr cmd_buf,
#endif
    uint32_t  width,
    uint32_t  height,
    glm::mat4 view_mat,
    glm::mat4 projection_mat)
{
#if defined(DWSF_VULKAN)

#else
    DW_SCOPED_SAMPLE("Render Sky Box");

    glEnable(GL_DEPTH_TEST);
    glDepthFunc(GL_LEQUAL);
    glDisable(GL_CULL_FACE);

    m_render_program->use();
    m_vao->bind();

    glBindFramebuffer(GL_FRAMEBUFFER, 0);
    glViewport(0, 0, width, height);

    m_render_program->set_uniform("u_View", view_mat);
    m_render_program->set_uniform("u_Projection", projection_mat);

    if (m_render_program->set_uniform("s_Cubemap", 0))
        m_cubemap->bind(0);

    glDrawArrays(GL_TRIANGLES, 0, 36);

    glDepthFunc(GL_LESS);
#endif
}

// -----------------------------------------------------------------------------------------------------------------------------------
} // namespace dw